[{"path":"https://allertbijleveld.github.io/tools4watlas/articles/extended_workflow/add_residency_patches.html","id":"background-and-parameter-explanation","dir":"Articles > Extended_workflow","previous_headings":"","what":"Background and parameter explanation","title":"Add residency patches","text":"atl_res_patch() function designed segment WATLAS movement data residence patches. main parameter speed (max_speed). perfect data parameter necessary adjust, speeds flying walking standing overlap. However, WATLAS data localization error (comparable GPS accuracy, see Beardsworth et al. 2022) can gaps, need additional variables classifying data robust residence patches. logic function first identify proto-patches (preliminary residence patches), based subsequent localizations speed < max_speed, distance positions < lim_spat_indep time positions < lim_time_indep. Proto-patches less positions min_fixes, filtered . function calculates median proto-patch position time proto-patch (time last location first location next proto-patch). Based , proto-patches merged distance median position proto-patch < lim_spat_indep, time proto-patch < lim_time_indep. Lastly, function assigns unique patch ID residency patch 1 n, order time. Note: Keep mind smoothing thinning influence speed thus residence patches. atl_res_patch() function designed work data already filtered (var_max < 5000) smoothed (moving_window = 5), recommended run function steps. short position intervals (e.g. 3 sec), position error can lead speed outliers, influences (.e. reduces) creation proto-patches. avoid , speed can set higher value, data can thinned . Parameters overview: max_speed: numeric value specifying maximum speed (m/s) two coordinates considered non-transitory. lim_spat_indep: numeric value distance metres spatial distance two patches considered independent. parameter avoid gap data make new proto-patch bird still location works combination lim_time_indep. lim_time_indep: numeric value time minutes time difference two patches considered independent. parameter can prevent creation new proto-patches large gaps data. example, roost site bird might move long location bad signal strength, can assume bird still location. bird moves away sends data , can classify positions place residency patch. min_fixes: minimum number fixes group spatially-proximate number points considered proto-patch. make sure least points considered together qualify residency patch. min_duration: minimum duration (seconds) classifying residence patches. high-sampling interval (e.g. 1 sec), short residence patches can created, biological relevant. Guidelines choose parameters: general, deciding optimal parameters, key find good balance true false positives. give starting points parameter, adjusted based data quality species behaviour. max_speed: high possible walking flying speeds. Due error data erroneously high/‘flying’ speeds corrected due subsequent proto-patches merged distance. good starting point 3 m/s, increased needed, prevents creation proto-patches assigned resident locations. lim_spat_indep: Decides distance two proto-patches considered independent. key parameter, prevents creation new proto-patches bird still location. good starting point 75 m, increased data gappy species large elongated foraging patches. lim_time_indep: 180 min (2 hours) works typically, increased (e.g. 240) really gappy data. min_fixes: small possible. assign new patch speed consistently (several points) threshold, just . 3 fixes usually work. min_duration: small possible, given biological relevance. 120 sec (2 minutes) seems reasonable.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/extended_workflow/add_residency_patches.html","id":"load-packages-and-required-data","dir":"Articles > Extended_workflow","previous_headings":"Background and parameter explanation","what":"Load packages and required data","title":"Add residency patches","text":"","code":"# packages library(tools4watlas) library(ggplot2) library(viridis) library(foreach) library(doFuture)  # load example data data <- data_example  # file path to WATLAS teams data folder fp <- atl_file_path(\"watlas_teams\")  # load tide pattern data tidal_pattern <- fread(paste0(   fp, \"waterdata/allYears-tidalPattern-west_terschelling-UTC.csv\" ))"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/extended_workflow/add_residency_patches.html","id":"calculate-residency-patches-by-tag","dir":"Articles > Extended_workflow","previous_headings":"","what":"Calculate residency patches by tag","title":"Add residency patches","text":"calculate residency patches, can first subset relevant columns data (reduce memory size table - table sent cores computing parallel), also can use original data.table, working data. extract unique tag IDs data run atl_res_patch() tag parallel, adds additional column data table, called patch, contains unique patch ID’s tag.","code":"# subset relevant columns data <- data[, .(species, posID, tag, time, datetime, x, y, tideID)]  # unique tag ID id <- unique(data$tag)  # register cores and backend for parallel processing registerDoFuture() plan(multisession)  # loop through all tags to calculate residency patches data <- foreach(i = id, .combine = \"rbind\") %dofuture% {   atl_res_patch(     data[tag == i],     max_speed = 3, lim_spat_indep = 75, lim_time_indep = 180,     min_fixes = 3, min_duration = 120   ) }  # close parallel workers plan(sequential)  # show head of the summary table head(data) |> knitr::kable(digits = 2)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/extended_workflow/add_residency_patches.html","id":"evaluate-residency-patch-classification-and-parameters","dir":"Articles > Extended_workflow","previous_headings":"","what":"Evaluate residency patch classification and parameters","title":"Add residency patches","text":"function atl_check_res_patch() can used evaluate residency patch classification, tag tide. title plot gives standard information data water level corresponding tide. plots track residency patches map shows duration (time patch min) coloured polygon map plot time separate plot. Time starts top goes high tide high tide (solid blue lines), well indicating low tide (dashed blue line).","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/extended_workflow/add_residency_patches.html","id":"example-for-one-tag-and-tide","dir":"Articles > Extended_workflow","previous_headings":"Evaluate residency patch classification and parameters","what":"Example for one tag and tide","title":"Add residency patches","text":"can select one tag tide plot data. Additionally, need specify offset tidal data use (e.g. 30 min Terschelling) buffer (m) around residency patch data create polygon. buffer best lim_spat_indep.","code":"atl_check_res_patch(   data[tag == \"3038\"], tide_data = tidal_pattern,   tide = \"2023513\", offset = 30,   buffer_res_patches = 75 )"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/extended_workflow/add_residency_patches.html","id":"loop-through-all-tags-and-tides","dir":"Articles > Extended_workflow","previous_headings":"Evaluate residency patch classification and parameters","what":"Loop through all tags and tides","title":"Add residency patches","text":"better overview can also plot data tag tide example random sample 100 tags tides. plots saved choosen directory (e.g. ./outputs/res_patch_check/ - edit path desired), created running code. Based plots potentially additional checks, parameters can adjusted improve classification residency patches.","code":"# unique ID combinations idc <- unique(data[, c(\"species\", \"tag\", \"tideID\")])  # sample 100 combinations to plot set.seed(123) idc <- idc[sample(.N, 100)]  # register cores and backend for parallel processing registerDoFuture() plan(multisession)  # loop to make plots for all foreach(i = seq_len(nrow(idc))) %dofuture% {    # plot and save for each combination   atl_check_res_patch(     data[tag == idc$tag[i]],     tide_data = tidal_pattern,     tide = idc$tideID[i], offset = 30,     buffer_res_patches = 50,     filename = paste0(       \"./outputs/res_patch_check/\",       idc$species[i], \"_tag_\", idc$tag[i], \"_tide_\", idc$tideID[i]     )   )  }  # close parallel workers plan(sequential)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/extended_workflow/add_residency_patches.html","id":"summary-of-residency-patch-data","dir":"Articles > Extended_workflow","previous_headings":"","what":"Summary of residency patch data","title":"Add residency patches","text":"satisfied residency patch classification, can summarize residency patches tag patch merge desired columns back full data table.","code":"# summary of residency patches data_summary <- atl_res_patch_summary(data)  # duration in minutes data_summary[, duration := duration / 60]  # merge desired summary columns to data data[data_summary, on = c(\"tag\", \"patch\"), `:=`(   duration = i.duration,   disp_in_patch = i.disp_in_patch )]  # show head of the summary table head(data_summary) |> knitr::kable(digits = 2)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/extended_workflow/add_residency_patches.html","id":"plot-by-tag","dir":"Articles > Extended_workflow","previous_headings":"Summary of residency patch data","what":"Plot by tag","title":"Add residency patches","text":"can also easily plot residency patches tag desired using ggplot2. example plot residency patches one red knot (tag 3038). residency patches coloured patch ID, points plotted grey colour show track.  plot residency patch ’s median position duration minutes size colour points.","code":"# subset red knot data_subset <- data[tag == 3038] data_summary_subset <- data_summary[tag == 3038]  # create basemap bm <- atl_create_bm(data_subset, buffer = 500)  # track with residency patches coloured bm +   geom_path(data = data_subset, aes(x, y), alpha = 0.1) +   geom_point(     data = data_subset, aes(x, y), color = \"grey\",     show.legend = FALSE   ) +   geom_point(     data = data_subset[!is.na(patch)], aes(x, y, color = as.character(patch)),     size = 1.5, show.legend = FALSE   ) # plot residency patches itself by duration bm +   geom_point(     data = data_summary_subset,     aes(x_median, y_median, color = duration, size = duration),     show.legend = TRUE, alpha = 0.5   ) +   scale_color_viridis()"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/extended_workflow/add_residency_patches.html","id":"plot-by-species","dir":"Articles > Extended_workflow","previous_headings":"Summary of residency patch data","what":"Plot by species","title":"Add residency patches","text":"Similar, can plot residency patches species. need merge species information back summary table, done code . residency patches coloured species sized duration.","code":"# create basemap bm <- atl_create_bm(data, buffer = 500)  # add species du <- unique(data, by = \"tag\") data_summary <- data_summary[du, on = \"tag\", `:=`(species = i.species)]  # plot residency patches itself by duration and species bm +   geom_point(     data = data_summary,     aes(x_median, y_median, color = species, size = duration),     show.legend = TRUE, alpha = 0.5   ) +   scale_color_manual(     values = atl_spec_cols(),     labels = atl_spec_labs(\"multiline\"),     name = \"\"   )"},{"path":[]},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/extended_workflow/add_tidal_and_bathymetry_data.html","id":"load-packages-and-movement-data","dir":"Articles > Extended_workflow","previous_headings":"","what":"Load packages and movement data","title":"Add tidal and bathymetry data","text":"","code":"library(tools4watlas) library(terra) library(ggplot2)  # path to csv with aggregated data data_path <- system.file(   \"extdata\", \"watlas_data_smoothed.csv\",   package = \"tools4watlas\" )  # load data data <- fread(data_path, yaml = TRUE)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/extended_workflow/add_tidal_and_bathymetry_data.html","id":"add-tidal-data","dir":"Articles > Extended_workflow","previous_headings":"","what":"Add tidal data","title":"Add tidal and bathymetry data","text":"Tide data West-Terschelling prepared Allert. located “WATLAS” SharePoint folder: Documents/data/. Either specify path local copy folder add path user atl_file_path() function. offset 30 minutes set match Griend. One can also interpolate water level data function setting example waterdata_interpolation = \"1 min\". keep tidal pattern original time resolution, interpolate water level data specified resolution.","code":"# file path to WATLAS teams data folder fp <- atl_file_path(\"watlas_teams\")  # sub path to tide data tidal_pattern_fp <- paste0(   fp, \"waterdata/allYears-tidalPattern-west_terschelling-UTC.csv\" ) measured_water_height_fp <- paste0(   fp, \"waterdata/allYears-gemeten_waterhoogte-west_terschelling-clean-UTC.csv\" )  # load tide data tidal_pattern <- fread(tidal_pattern_fp) measured_water_height <- fread(measured_water_height_fp)  # add tide data to movement data data <- atl_add_tidal_data(   data = data,   tide_data = tidal_pattern,   tide_data_highres = measured_water_height,   waterdata_resolution = \"10 min\",   waterdata_interpolation = \"1 min\",   offset = 30 )  # show first 5 rows (subset of columns to show additional ones) head(data[, .(tag, datetime, tideID, tidaltime, time2lowtide, waterlevel)]) |>   knitr::kable(digits = 2)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/extended_workflow/add_tidal_and_bathymetry_data.html","id":"add-bathymetry-data","dir":"Articles > Extended_workflow","previous_headings":"","what":"Add bathymetry data","title":"Add tidal and bathymetry data","text":"short example add bathymetry data WATLAS data. Bathymetry data can found “Birds, fish ’n chips” SharePoint folder: Documents/data/GIS/rasters/. run script set file path (fp) local copy folder computer. data can also downloaded Waddenregister. Extract bathymetry data location coarsely classify time tide cycle.","code":"# file path to Birds, fish 'n chips GIS/rasters folder fp <- atl_file_path(\"rasters\")  # load bathymetry data bat <- rast(paste0(fp, \"bathymetry/2024/bodemhoogte_20mtr_UTM31_int.tif\"))  # add bathymetry data data <- atl_add_raster_data(   data, raster_data = bat, new_name = \"bathymetry\", change_unit = 100 # m to cm )  # show first 5 rows (subset of columns to show additional ones) head(data[, .(tag, datetime, bathymetry)]) |>   knitr::kable(digits = 2)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/extended_workflow/add_tidal_and_bathymetry_data.html","id":"save-as-example-data-for-tools4watlas-","dir":"Articles > Extended_workflow","previous_headings":"Add bathymetry data","what":"Save as example data for tools4watlas.","title":"Add tidal and bathymetry data","text":"(step just save tools4watlas example data)","code":"# reassign so data_example is data and select two tides data_example <- data[tideID %in% c(2023513, 2023514)] save(data_example, file = \"../../data/watlas_data_example.rda\")"},{"path":[]},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/extended_workflow/add_tidal_and_bathymetry_data.html","id":"filter-data-with-specific-times-within-the-tide-cycle","dir":"Articles > Extended_workflow","previous_headings":"Example: Filter data with by tide and plot with bathymetry data","what":"Filter data with specific times within the tide cycle","title":"Add tidal and bathymetry data","text":"select localizations mudlfats available foraging, can example select low tide period -2.5 hours +2.5 hours around low tide (Bijleveld et al. 2016):","code":"# select the low tide period for a particular tide as specified by tideID data_subset <- atl_filter_covariates(   data = data,   filters = c(     \"tideID %in% c(2023513, 2023514)\",     \"between(time2lowtide, -2.5 * 60, 2.5 * 60)\"   ) ) ## Note: 50.18% of the dataset was filtered out, corresponding to 43596 positions."},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/extended_workflow/add_tidal_and_bathymetry_data.html","id":"plot-data-movement-data-with-bathymetry-data","dir":"Articles > Extended_workflow","previous_headings":"Example: Filter data with by tide and plot with bathymetry data","what":"Plot data movement data with bathymetry data","title":"Add tidal and bathymetry data","text":"","code":"# additional packages library(ggplot2) library(viridis) library(scales)  # file path to WATLAS teams data folder fp <- atl_file_path(\"rasters\")  # load bathymetry data bat <- rast(paste0(fp, \"bathymetry/2024/bodemhoogte_20mtr_UTM31_int.tif\"))  # create base map with bathymetry data bm <- atl_create_bm(   data_subset,   buffer = 1000, raster_data = bat, option = \"bathymetry\" )  # plot data bm +   geom_path(     data = data_subset, aes(x, y, group = tag, colour = bathymetry),     alpha = 0.1, show.legend = FALSE   ) +   geom_point(     data = data_subset, aes(x, y, color = bathymetry), size = 1,     alpha = 0.7, show.legend = TRUE   ) +   guides(colour = guide_colourbar(position = \"inside\"), fill = \"none\") +   scale_color_viridis(     direction = 1, option = \"inferno\", name = \"Bathymetry\\n(cmNHM)\",     limits = c(-200, 200), oob = scales::squish   ) +   theme(     legend.position.inside = c(0.07, 0.2),     legend.background = element_rect(fill = NA)   )"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/filter_data.html","id":"loading-the-data","dir":"Articles","previous_headings":"","what":"Loading the data","title":"Filter data","text":"","code":"# packages library(tools4watlas) library(lubridate) library(sf) library(ggplot2) library(scales) library(viridis)  # path to csv with raw data data_path <- system.file(   \"extdata\", \"watlas_data_raw.csv\",   package = \"tools4watlas\" )  # load data data <- fread(data_path, yaml = TRUE)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/filter_data.html","id":"spatial-filtering","dir":"Articles","previous_headings":"","what":"Spatial filtering","title":"Filter data","text":"Depending analysis, can make sense use spatial filter exclude large outliers subset data area interest. example subset data around Griend, Richel Ballastplaat. Note example data within specified bounding box, data filtered . Heatmap positions bounding box (red) data removed, one might want look removed. can done like shown (code run nothing removed example).","code":"# location east of Griend griend_east <- st_sfc(st_point(c(5.275, 53.2523)), crs = st_crs(4326)) |>   st_transform(crs = st_crs(32631))  # rectangle including Griend, Richel and Ballastplaat bbox <- atl_bbox(griend_east, asp = \"16:9\", buffer = 8000) bbox_sf <- st_as_sfc(bbox)  # create a base map bm <- atl_create_bm(buffer = 10000)  # round data to 1 ha (100x100 meter) grid cells data[, c(\"x_round\", \"y_round\") := list(   plyr::round_any(x, 100),   plyr::round_any(y, 100) )]  # N by location data_subset <- data[, .N, by = c(\"x_round\", \"y_round\")]  # plot data with bounding box bm +   geom_tile(     data = data_subset, aes(x_round, y_round, fill = N),     linewidth = 0.1, show.legend = TRUE   ) +   geom_sf(data = bbox_sf, color = \"firebrick\", fill = NA) +   scale_fill_viridis(     option = \"A\", discrete = FALSE, trans = \"log10\", name = \"N positions\",     breaks = trans_breaks(\"log10\", function(x) 10^x),     labels = trans_format(\"log10\", math_format(10^.x)),     direction = -1   ) +   coord_sf(expand = FALSE) # remove rounded coordinates columns data[, c(\"x_round\", \"y_round\") := NULL]  # filter data with bounding box # note: for large tables use range and not sf_polygon data <- atl_filter_bounds(   data = data,   x = \"x\",   y = \"y\",   x_range = c(bbox[\"xmin\"], bbox[\"xmax\"]),   y_range = c(bbox[\"ymin\"], bbox[\"ymax\"]),   remove_inside = FALSE ) # check what was removed data_removed <- atl_filter_bounds(   data = data,   x = \"x\",   y = \"y\",   x_range = c(bbox[\"xmin\"], bbox[\"xmax\"]),   y_range = c(bbox[\"ymin\"], bbox[\"ymax\"]),   remove_inside = TRUE )  # create a base map bm <- atl_create_bm(data_removed, buffer = 1000)  # check removed data bm +   geom_point(     data = data_removed, aes(x, y), color = \"firebrick\",     size = 0.5, alpha = 1, show.legend = FALSE   ) +   geom_sf(data = bbox_sf, color = \"firebrick\", fill = NA)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/filter_data.html","id":"temporal-filtering","dir":"Articles","previous_headings":"","what":"Temporal filtering","title":"Filter data","text":"now want filter positions tag bird released. Since usually takes bit time birds adjusted catching getting used new tag, also exclude 24 hours release. Sometimes tag still gives data fell bird died, case can exclude positions . identify circumstances, can help plot example last 1000 positions tag (see vignette: plotting data). birds might also directly left area release, depending project might useful already exclude birds data point (e.g. less 100 positions - none birds filtered case using example data).","code":"# load meta data all_tags_path <- system.file(   \"extdata\", \"tags_watlas_subset.xlsx\", package = \"tools4watlas\" ) all_tags <- readxl::read_excel(all_tags_path, sheet = \"tags_watlas_all\") |>   data.table()  # correct time zone to CET and change to UTC all_tags[, release_ts := force_tz(as_datetime(release_ts), tzone = \"CET\")] all_tags[, release_ts := with_tz(release_ts, tzone = \"UTC\")]  # join release_ts with data all_tags[, tag := as.character(tag)] data[all_tags, on = \"tag\", `:=`(release_ts = i.release_ts)]  # exclude positions before the release and 24h after data <- data[datetime > release_ts + 24 * 3600]  # exclude positions after this date (bird died): data <- data[!(tag == \"3103\" &                  datetime > as.POSIXct(\"2023-09-25 15:00:00\", tz = \"UTC\"))]  # exclude tags with less than 100 positions data[, N := .N, tag] data[N < 100] |> unique(by = \"tag\") data <- data[N > 100]  # remove unneeded columns data[, release_ts := NULL] data[, N := NULL]"},{"path":[]},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/filter_data.html","id":"based-on-watlas-error-estimate","dir":"Articles","previous_headings":"Filtering location errors","what":"Based on WATLAS error estimate","title":"Filter data","text":"5000 typically used Allert.","code":"# filter based on variance in the Easting and Northing var_max <- 5000 # in meters squared  data <- atl_filter_covariates(   data = data,   filters = c(     sprintf(\"varx < %s\", var_max),     sprintf(\"vary < %s\", var_max)   ) ) ## Note: 0.54% of the dataset was filtered out, corresponding to 470 positions."},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/filter_data.html","id":"based-on-speed","dir":"Articles","previous_headings":"Filtering location errors","what":"Based on speed","title":"Filter data","text":"filter unrealistic positions. Histogram speed moved data","code":"# calculate speed data <- atl_get_speed(data, type = c(\"in\", \"out\"))  # plot speed (subset relevant range) ggplot(data = data[!is.na(speed_in) & speed_in > 5 & speed_in < 100]) +   geom_histogram(aes(x = speed_in), bins = 50) +   labs(x = \"Speed in (m/s)\") +   theme_bw() # filter by speed speed_max <- 35 # m/s (126 km/h)  data <- atl_filter_covariates(   data = data,   filters = c(     sprintf(\"speed_in < %s | is.na(speed_in)\", speed_max),     sprintf(\"speed_out < %s | is.na(speed_out)\", speed_max)   ) ) ## Note: 0.36% of the dataset was filtered out, corresponding to 315 positions. # recalculate speed data <- atl_get_speed(data, type = c(\"in\", \"out\"))"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/filter_data.html","id":"save-data","dir":"Articles","previous_headings":"","what":"Save data","title":"Filter data","text":"","code":"# save data fwrite(data, file = \"../inst/extdata/watlas_data_filtered.csv\", yaml = TRUE)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/literature/literature.html","id":"this-bibliography-contains-all-peer-reviewed-publications-linked-to-watlas","dir":"Articles > Literature","previous_headings":"","what":"This bibliography contains all peer-reviewed publications linked to WATLAS","title":"Literature","text":".bib file containing full bibliography BibTeX can downloaded .","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/literature/literature.html","id":"introduction","dir":"Articles > Literature","previous_headings":"This bibliography contains all peer-reviewed publications linked to WATLAS","what":"Introduction","title":"Literature","text":"Tracking animal movement crucial understanding interactions changing environments predicting effects anthropogenic activities, particularly ecologically significant areas like Wadden Sea. WATLAS system (Wadden Sea Advanced Tracking Localisation Animals real life Systems) enables high-resolution monitoring small bird movements, offering insights space use, individual variation, social networks, thereby supporting research conservation efforts region. detailed description WATLAS can found Bijleveld et al. (2022). Nathan et al. (2022) discuss big-data approaches, high-throughput tracking WATLAS, can lead increased understanding ecology animal movement. Particularly advances high-throughput wildlife tracking systems now allow thorough investigation variation among individuals species across space time, nature biological interactions, behavioral responses environment.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/literature/literature.html","id":"prologue-to-watlas","dir":"Articles > Literature","previous_headings":"This bibliography contains all peer-reviewed publications linked to WATLAS","what":"Prologue to WATLAS","title":"Literature","text":"ATLAS builds inspired ‘Time Arrival’-tracking developed MacCurdy & Richard M. Gabrielson (2009). tracking method described MacCurdy et al. (2018) also includes pilot study Wadden Sea ‘proof concept’. initial tests 2008-2009, pre-WATLAS TOA-system deployed Wadden Sea 15 receivers studying red knot habitat use. much trial error, show Bijleveld et al. (2016) red knots selected habitat maximise energy intake rates. , however, select areas highest density prey trade-prey quantity quality. Moreover, individuals differed leaned towards quantity quality prey selecting mudflat habitat. success Wadden Sea, also deployed TOA-tracking Mauritania. studied xx showed habitat use independent gizzard mass. Consistent previous empirical studies, patch residence times field positively correlated gizzard mass. slope correlation, well observed range patch residence times, accordance simulated values. 12 birds reduced gizzard masses decrease patch residence times response reduction gizzard mass. * findings suggest diet preferences can indeed cause observed among-individual variation gizzard mass patch residence times. Compared Banc d’Arguin, resource patches Wadden Sea larger maximum local resource abundance higher. However, constraints set digestive capacity, average potential intake rates red knots similar two study sites. Space-use patterns differed predicted differences resource landscapes. Whereas foraging red knots Wadden Sea roamed mudflats high aggregation without site fidelity (.e. grouping nomads), Banc d’Arguin showed less aggregation strongly site-faithful (.e. solitary residents). part broader review circadian rhythms, reveal individual differences tidal circadian foraging rhythms red knots REF.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/literature/literature.html","id":"validation","dir":"Articles > Literature","previous_headings":"This bibliography contains all peer-reviewed publications linked to WATLAS","what":"Validation","title":"Literature","text":"Validation methods crucial understanding strengths limitations. Beardsworth et al. (2022) tested accuracy precision WATLAS using concurrent GPS measurements reference. median accuracy WATLAS 4 m compared GPS localizations. Localizations collected receiver stations accurate. three-receiver localizations provided accuracy 10 m, increased 3 m seven receivers contributing localization. Applying Filter-Smoothing data increased accuracy 6 m three-receiver localizations 2 m seven-receiver localizations.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/literature/literature.html","id":"methods","dir":"Articles > Literature","previous_headings":"This bibliography contains all peer-reviewed publications linked to WATLAS","what":"Methods","title":"Literature","text":"pipeline coding examples cleaning (e.g. Filter-Smoothing) high-throughput tracking data atlastools (tools4watlas builds atlastools) presented Gupte et al. (2022). Toledo et al. (2022) describe tags particulary design versatile, widely-applicable, field-proven ‘Vildehaye’ tags wildlife sensing radio tracking. Also, discuss longevity tags show WATLAS tags CR2032 battery transmitting 6 s can last 226 days.","code":""},{"path":[]},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/literature/literature.html","id":"migration-relocation-and-departure-decisions","dir":"Articles > Literature","previous_headings":"This bibliography contains all peer-reviewed publications linked to WATLAS > Ecology","what":"Migration, relocation and departure decisions","title":"Literature","text":"studied environmental conditions red knots selected relocation flights across North Sea United Kingdom Gobbens et al. (2024). Approximately 37% tagged red knots departed yearly average hours sunset, 4h high tide, tailwinds, little cloud cover.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/literature/literature.html","id":"habitat-use","dir":"Articles > Literature","previous_headings":"This bibliography contains all peer-reviewed publications linked to WATLAS > Ecology","what":"Habitat use","title":"Literature","text":"Red knots foraging thick-shelled cockles, swallowed whole, needed trade-quantity quality prey. Bijleveld et al. (2016) show , therefore, select habitat intermediate prey densities maximise energy intake rates. shorebirds, select highest desnities prey easiliy discovered. Penning et al. (prep) show Sanderling select habitat highest desnities shrimp.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/literature/literature.html","id":"individual-variation","dir":"Articles > Literature","previous_headings":"This bibliography contains all peer-reviewed publications linked to WATLAS > Ecology","what":"Individual variation","title":"Literature","text":"Ersoy et al. (2022) showed foraging tactics diet associated personality trait exploration, independent morphological differences. WATLAS used locate tagged individuals mudflats detailed behavioural observations. Following result, Ersoy et al. (2024) studied development consistent exploration behaviour found juvenile red knots diverse diet adults less consistent personalites. discuss pathway early foraging experiences shape development exploratory personalities. WATLAS used show juvenile red knots differed habitat use, presented appendix.","code":""},{"path":[]},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/load_and_check_data.html","id":"good-to-know","dir":"Articles","previous_headings":"","what":"Good to know","title":"Loading and checking data","text":"tools4watlas based data.table fast efficient. key feature data.table modification place, data changed without making copy. prevent (whenever desired) use function copy() make true copy data set. Basic knowledge data.table helpful, necessary, working tools4watlas.","code":"# packages library(tools4watlas) library(lubridate) library(ggplot2) library(scales) library(viridis)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/load_and_check_data.html","id":"getting-data","dir":"Articles","previous_headings":"","what":"Getting data","title":"Loading and checking data","text":"WATLAS data can either loaded local SQLite database remote SQL database server. , first select tags time period extract data. Use tags_watlas_all.xlsx file (including metadata tags) collaborators tags_watlas_subset.xlsx (including subset metadata) select desired tags. shown example data tools4watlas. Loading tags_watlas_subset.xlsx provide table following columns:","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/load_and_check_data.html","id":"select-the-desired-tags-and-time-period","dir":"Articles","previous_headings":"Getting data","what":"Select the desired tags and time period","title":"Loading and checking data","text":"","code":"# file path to the metadata fp <- system.file(   \"extdata\", \"tags_watlas_subset.xlsx\", package = \"tools4watlas\" )  # load meta data all_tags <- readxl::read_excel(fp, sheet = \"tags_watlas_all\") |>   data.table()  # subset desired tags using data.table # (for example all tags from 2023) tags <- all_tags[year == 2023]$tag  # time period for which data should be extracted form the database (in CET) from <- \"2023-09-21 00:00:00\" to <- \"2023-09-25 00:00:00\""},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/load_and_check_data.html","id":"extract-data-from-local-sqlite-file","dir":"Articles","previous_headings":"Getting data","what":"Extract data from local SQLite file","title":"Loading and checking data","text":"First, path file name local SQLite database need provided. , established connection, database can queried selected tags period. load tagging data one data.table.","code":"# database connection sqlite_db <- system.file(   \"extdata\", \"watlas_example.SQLite\", package = \"tools4watlas\" ) con <- RSQLite::dbConnect(RSQLite::SQLite(), sqlite_db)  # load data from database data <- atl_get_data(   tags,   tracking_time_start = from,   tracking_time_end = to,   timezone = \"CET\",   use_connection = con )  # close connection RSQLite::dbDisconnect(con)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/load_and_check_data.html","id":"alternatively-extract-from-remote-sql-database","dir":"Articles","previous_headings":"Getting data","what":"Alternatively, extract from remote SQL-database","title":"Loading and checking data","text":"safely work database credentials one option store environmental variables R. allows example scripts GitHub without sharing . Restart R adding variables able access . Ask Allert host, username password add environment like : atl_get_data connecting local SQLite database connecting remote database. example (chunk run shown) load last three days data tags 2024. Host, username password specified environmental variables example, can also specified directly. Since want date metadata load tags_watlas_all.xlsx “WATLAS” SharePoint folder: Documents/data/. Either specify path local copy folder add path user atl_file_path() function.","code":"# open .Renviron to edit file.edit(\"~/.Renviron\")  # add variables host = \"host\" username = \"username\" password = \"password\"  # access variables (example) Sys.getenv(\"variable_name\") # file path to WATLAS teams data folder fp <- atl_file_path(\"watlas_teams\")  # load meta data all_tags <- readxl::read_excel(   paste0(fp, \"tags/tags_watlas_all.xlsx\"),   sheet = \"tags_watlas_all\" ) |>   data.table()  # subset all tags from 2024 tags <- all_tags[year == 2024]$tag  # select N last days to get data from days <- 3 from <- (Sys.time() - 86400 * days) |> as.character() to <- (Sys.time() + 3600) |> as.character()  # load data from database data <- atl_get_data(   tags,   tracking_time_start = from,   tracking_time_end = to,   timezone = \"CET\",   host = Sys.getenv(\"host\"),   database = \"atlas2024\",   username = Sys.getenv(\"username\"),   password = Sys.getenv(\"password\") )"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/load_and_check_data.html","id":"data-explanation","dir":"Articles","previous_headings":"","what":"Data explanation","title":"Loading and checking data","text":"resulting loaded WATLAS data data.table following columns:","code":"# show head of the table head(data) |> knitr::kable(digits = 2)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/load_and_check_data.html","id":"remove-data-before-release","dir":"Articles","previous_headings":"Data explanation","what":"Remove data before release","title":"Loading and checking data","text":"","code":"# correct time zone to CET and change to UTC all_tags[, release_ts := force_tz(as_datetime(release_ts), tzone = \"CET\")] all_tags[, release_ts := with_tz(release_ts, tzone = \"UTC\")]  # join release_ts with data all_tags[, tag := as.character(tag)] data[all_tags, on = \"tag\", `:=`(release_ts = i.release_ts)]  # exclude positions before the release data <- data[datetime > release_ts]  # remove release_ts column data[, release_ts := NULL]"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/load_and_check_data.html","id":"add-species-column-or-other-relevant-columns","dir":"Articles","previous_headings":"Data explanation","what":"Add species column (or other relevant columns)","title":"Loading and checking data","text":"working multiple species, can join species metadata. case want species first row table. can also add metadata merging whatever column want (e.g. color rings catch location). However, working large data sets, advised add columns necessary. can also always done whenever needed. just example delete columns .","code":"# join with species data all_tags[, tag := as.character(tag)] data[all_tags, on = \"tag\", `:=`(species = i.species)]  # make species first column setcolorder(data, c(\"species\", setdiff(names(data), c(\"species\"))))  # order data.table setorder(data, species, tag, time) # join with metal rings, color rings and catch location all_tags[, tag := as.character(tag)] data[all_tags, on = \"tag\", `:=`(   rings = i.rings,   crc = i.crc,   catch_location = i.catch_location )]  # delete columns data[, c(\"rings\", \"crc\", \"catch_location\") := NULL]"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/load_and_check_data.html","id":"save-data","dir":"Articles","previous_headings":"","what":"Save data","title":"Loading and checking data","text":"point might good save raw data, extrating data database can take long time big datasets. convenient fast way use fwrite data.table package. including yaml = TRUE make sure data stays format load . Change file path running example.","code":"# save data fwrite(data, file = \"../inst/extdata/watlas_data_raw.csv\", yaml = TRUE)"},{"path":[]},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/load_and_check_data.html","id":"data-summary","dir":"Articles","previous_headings":"Check data","what":"Data summary","title":"Loading and checking data","text":"simply check many individuals data many positions tag date . Plot number positions day. Number positions per day tag","code":"# load data data <- fread(\"../inst/extdata/watlas_data_raw.csv\", yaml = TRUE)  # data summary data_summary <- atl_summary(data, id_columns = c(\"species\", \"tag\"))  # N individuals with tagging data data_summary |> nrow() ## [1] 8 # N by species data_summary[, .N, by = species] ##              species     N ##               <char> <int> ## 1: bar-tailed godwit     1 ## 2:            curlew     1 ## 3:            dunlin     1 ## 4:     oystercatcher     1 ## 5:          red knot     1 ## 6:          redshank     1 ## 7:        sanderling     1 ## 8:         turnstone     1 # show head of the table data_summary |> knitr::kable(digits = 2) # add date data[, date := as.Date(datetime)] |> invisible()  # N positions by species and day data_subset <- data[, .N, by = .(tag, date)]  # plot data ggplot(data_subset, aes(x = date, y = tag, fill = N)) +   geom_tile() +   scale_fill_viridis(     option = \"A\", discrete = FALSE, trans = \"log10\", name = \"N positions\",     breaks = trans_breaks(\"log10\", function(x) 10^x),     labels = trans_format(\"log10\", math_format(10^.x)),     direction = -1   ) +   labs(x = \"Date\", y = \"Tag\") +   theme_classic()"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/load_and_check_data.html","id":"plot-overview-of-the-data","dir":"Articles","previous_headings":"Check data","what":"Plot overview of the data","title":"Loading and checking data","text":"Now want see data map. large datasets convenient plot heatmaps, plotting example 40 million points result lot plotting makes plotting slow. dataset small, one can obviously also plot data tag number ways (see vignette plotting data). Heatmap positions","code":"# create basemap bm <- atl_create_bm(data, buffer = 800)  # round data to 1 ha (100x100 meter) grid cells data[, c(\"x_round\", \"y_round\") := list(   plyr::round_any(x, 100),   plyr::round_any(y, 100) )]  # N by location data_subset <- data[, .N, by = c(\"x_round\", \"y_round\")]  # plot heatmap bm +   geom_tile(     data = data_subset, aes(x_round, y_round, fill = N),     linewidth = 0.1, show.legend = TRUE   ) +   scale_fill_viridis(     option = \"A\", discrete = FALSE, trans = \"log10\", name = \"N positions\",     breaks = trans_breaks(\"log10\", function(x) 10^x),     labels = trans_format(\"log10\", math_format(10^.x)),     direction = -1   )"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/package_development/basemap_data.html","id":"load-packages-and-specify-path-to-local-data","dir":"Articles > Package_development","previous_headings":"","what":"Load packages and specify path to local data","title":"Basemap data","text":"","code":"# packages library(data.table) library(tools4watlas) library(sf) library(ggplot2) library(rnaturalearth) library(rnaturalearthdata)  # file path to Birds, fish 'n chips GIS/shapefiles folder fp <- atl_file_path(\"shapefiles\")"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/package_development/basemap_data.html","id":"define-a-bounding-box-of-the-dutch-wadden-sea","dir":"Articles > Package_development","previous_headings":"","what":"Define a bounding box of the Dutch Wadden Sea","title":"Basemap data","text":"First define bounding box used crop land polygon data. Bounding box around Dutch Wadden Sea","code":"# get data from the Netherlands netherlands <- ne_countries(   country = \"netherlands\", scale = \"large\", returnclass = \"sf\" ) |>   st_transform(crs = st_crs(32631))  # point of Griend (and a bit east) griend <- st_sfc(st_point(c(5.2525 + 0.6, 53.2523)), crs = st_crs(4326)) |>   st_transform(crs = st_crs(32631))  # bounding box around Griend bbox <- atl_bbox(griend, asp = \"4:3\", buffer = 80000) bbox_sf <- bbox |> st_as_sfc()  # plot ggplot() +   geom_sf(data = netherlands) +   geom_sf(data = bbox_sf, color = \"firebrick3\", fill = NA) +   coord_sf(     xlim = c(bbox[\"xmin\"], bbox[\"xmax\"]),     ylim = c(bbox[\"ymin\"], bbox[\"ymax\"])   )"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/package_development/basemap_data.html","id":"extract-the-land-polygon-data-from-this-bounding-box","dir":"Articles > Package_development","previous_headings":"","what":"Extract the land polygon data from this bounding box","title":"Basemap data","text":"Cropped land polygon around Dutch Wadden Sea","code":"# load osm land polygon land_ <- st_read(quiet = TRUE, paste0(   fp, \"open_street_map/land-polygons-complete-4326/land_polygons.shp\" )) |>   st_transform(crs = st_crs(32631))  # crop data land <- st_intersection(land_, bbox_sf)  # extract only geometry land <- land[\"geometry\"]  # union to compress land <- st_union(land)  # plot ggplot() +   geom_sf(data = land) +   geom_sf(data = bbox_sf, color = \"firebrick\", fill = NA) +   coord_sf(     xlim = c(bbox[\"xmin\"], bbox[\"xmax\"]),     ylim = c(bbox[\"ymin\"], bbox[\"ymax\"])   )"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/package_development/basemap_data.html","id":"save-data","dir":"Articles > Package_development","previous_headings":"Extract the land polygon data from this bounding box","what":"Save data","title":"Basemap data","text":"Includes data package, tools4watlas opened project.","code":"# save data save(land, file = \"../../data/land.rda\", compress = \"xz\")"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/package_development/basemap_data.html","id":"define-a-polygon-of-the-dutch-wadden-sea","dir":"Articles > Package_development","previous_headings":"","what":"Define a polygon of the Dutch Wadden Sea","title":"Basemap data","text":"simplify basemap want mudflats within Wadden Sea, otherwise fclass also includes wetlands. Polygon Dutch Wadden Sea","code":"# load polygon of Wadden sea wadden_sea <- st_read(quiet = TRUE, paste0(   fp, \"wadden_area_legally/pkb_gebied_derde_nota_waddenzee.shp\" )) |>   st_transform(crs = st_crs(32631))  # crop with bbox wadden_sea <- st_intersection(wadden_sea, bbox_sf)  # buffer ws_buffer <- wadden_sea |> st_buffer(1000) ws_buffer <- ws_buffer[, c(\"geometry\")]  # check data ggplot() +   geom_sf(data = land) +   geom_sf(data = ws_buffer, color = \"firebrick\", fill = NA)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/package_development/basemap_data.html","id":"extract-mudflats-and-lakes-from-within-the-wadden-sea","dir":"Articles > Package_development","previous_headings":"","what":"Extract mudflats and lakes from within the Wadden Sea","title":"Basemap data","text":"take lakes Griend blow data. Final basemap data Dutch Wadden Sea","code":"# Friesland lakes_fr <- st_read(quiet = TRUE, paste0(   fp, \"open_street_map/friesland-latest-free.shp/gis_osm_water_a_free_1.shp\" ))  # North Holland lakes_nh <- st_read(quiet = TRUE, paste0(   fp, \"open_street_map/noord-holland-latest-free.shp/gis_osm_water_a_free_1.shp\" ))  # North Groningen lakes_g <- st_read(quiet = TRUE, paste0(   fp, \"open_street_map/groningen-latest-free.shp/gis_osm_water_a_free_1.shp\" ))   # merge both and change projection lakes_ <- rbind(lakes_fr, lakes_nh, lakes_g) |>   unique(by = \"osm_id\") |>   st_transform(crs = st_crs(32631))  # crop data lakes <- st_intersection(lakes_, ws_buffer)  # subset mudflats mudflats <- lakes[lakes$fclass == \"wetland\", ]  # union to compress mudflats <- st_union(mudflats)  # subset lakes lakes <- lakes[lakes$fclass == \"water\", ]  # crop to include just Griend griend <- st_sfc(st_point(c(5.2525, 53.2523)), crs = st_crs(4326)) |>   st_transform(crs = st_crs(32631)) bbox_sf <- atl_bbox(griend, asp = \"16:9\", buffer = 3000) |> st_as_sfc() lakes <- st_intersection(lakes, bbox_sf)  # union to compress lakes <- st_union(lakes)  # plot ggplot() +   geom_sf(     data = mudflats, fill = \"#faf5ef\", alpha = 0.6, colour = \"#faf5ef\"   ) +   geom_sf(data = land, fill = \"#faf5ef\", colour = \"grey80\") +   geom_sf(     data = lakes, fill = \"#D7E7FF\", colour = \"grey80\"   ) +   coord_sf(     xlim = c(bbox[\"xmin\"], bbox[\"xmax\"]),     ylim = c(bbox[\"ymin\"], bbox[\"ymax\"]),     expand = FALSE   ) +   theme(     panel.grid.major = element_line(colour = \"transparent\"),     panel.grid.minor = element_line(colour = \"transparent\"),     panel.background = element_rect(fill = \"#D7E7FF\"),     plot.background = element_rect(fill = \"transparent\", colour = NA),     panel.border = element_rect(fill = NA, colour = \"grey20\")   )"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/package_development/basemap_data.html","id":"save-data-1","dir":"Articles > Package_development","previous_headings":"Extract mudflats and lakes from within the Wadden Sea","what":"Save data","title":"Basemap data","text":"Includes data package, tools4watlas opened project.","code":"# save data save(mudflats, file = \"../../data/muddflats.rda\", compress = \"xz\") save(lakes, file = \"../../data/lakes.rda\", compress = \"xz\")"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/package_development/package_logo.html","id":"making-the-tools4watlas-logo","dir":"Articles > Package_development","previous_headings":"","what":"Making the tools4watlas logo","title":"tools4watlas logo","text":"script uses WATLAS logo create tools4watlas logo using R package hexSticker.","code":"# packages library(hexSticker) library(showtext)  # loading Google fonts (http://www.google.com/fonts) font_add_google(\"Merriweather\", \"merriweather\") # automatically use showtext to render text for future devices showtext_auto()  # path to WATLAS logo watlas <- \"../../man/figures/watlas_logo_clean.png\"  # make sticker sticker(watlas,         # name         package = \"tools4watlas\", p_size = 12, p_y = 0.5,         p_color = \"black\", p_family = \"merriweather\",          # logo         s_x = 1, s_y = 1.15, s_width = .85,         h_fill = \"#c8dbee\", h_color = \"#303c54\",         filename = \"../../man/figures/logo.png\")"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/package_development/package_maintenance.html","id":"contributing-to-tools4watlas","dir":"Articles > Package_development","previous_headings":"","what":"Contributing to tools4watlas","title":"Package maintenance","text":"want contribute tools4watlas fork repository GitHub submit pull request. Besides clear bug fixes, best discuss potential changes additions Allert Bijleveld. submitting pull request original “upstream” repository, please make sure code passes R CMD checks (devtools::check()) follow procedure described . details see R Packages Hadley Wickham Jennifer Bryan read documentation used packages.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/package_development/package_maintenance.html","id":"working-on-tools4watlas","dir":"Articles > Package_development","previous_headings":"","what":"Working on tools4watlas","title":"Package maintenance","text":"contributing, please follow existing structure repository R style (see ).","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/package_development/package_maintenance.html","id":"required-packages","dir":"Articles > Package_development","previous_headings":"Working on tools4watlas","what":"Required packages","title":"Package maintenance","text":"R packages needed:","code":"# packages library(devtools) library(roxygen2) library(usethis) library(pkgdown) library(lintr) library(styler) library(testthat) library(covr)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/package_development/package_maintenance.html","id":"coding-style","dir":"Articles > Package_development","previous_headings":"Working on tools4watlas","what":"Coding style","title":"Package maintenance","text":"Follows standard tidyverse style can checked using lintr. can use styler format code (take care needed changes, ). use style file working selected code. easiest use R Studio addin, otherwise use styler::style_file(\"my_file.R\"). Note code follows style moment (see .lintr exclusions), new code aim consistent .","code":"# single file lintr::lint(\"./file_name.R\")  # the whole package lintr::lint_package()"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/package_development/package_maintenance.html","id":"documentation-and-functions","dir":"Articles > Package_development","previous_headings":"Working on tools4watlas","what":"Documentation and functions","title":"Package maintenance","text":"package documented useing roxygen2. Functions R folder always prefix atl_. function roxygen2 header. header can created using Ctrl + Alt + Shift + R within new function, ’re using RStudio. Optimally, function runable example. done run:","code":"devtools::document()"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/package_development/package_maintenance.html","id":"test-coverage","dir":"Articles > Package_development","previous_headings":"Working on tools4watlas","what":"Test coverage","title":"Package maintenance","text":"test code? Testing code crucial ensuring reliability, correctness, maintainability. helps prevent errors ensures code works expected. tools4watlas uses testthat code located tests/testthat containing one R script function. adding new functions code, please add tests code . Check code coverage covr. test coverage details see codecov.","code":"# run tests devtools::test()  # check code coverage covr::package_coverage()"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/package_development/package_maintenance.html","id":"vignettes-and-articles","dir":"Articles > Package_development","previous_headings":"Working on tools4watlas","what":"Vignettes and articles","title":"Package maintenance","text":"Vignettes articles types documentation R packaged. difference vignettes included package (always checked devtools::check() included CRAN) run data provided package. Articles hand, included package can include links local data (e.g. large include package). presented package website (see ). vignettes articles, articles vignettes.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/package_development/package_maintenance.html","id":"check-vignettes","dir":"Articles > Package_development","previous_headings":"Working on tools4watlas > Vignettes and articles","what":"Check vignettes","title":"Package maintenance","text":"check vignettes correctly compiled, either use Knit button R Studio build single vignettes. also checked running devtools::check(), necessary everything fine (can help debugging).","code":"# check if all vignettes build devtools::build_vignettes()  # check if single vignette builds devtools::build_rmd(\"vignettes/vignette-name.Rmd\")"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/package_development/package_maintenance.html","id":"check-articles","dir":"Articles > Package_development","previous_headings":"Working on tools4watlas > Vignettes and articles","what":"Check articles","title":"Package maintenance","text":"check articles correctly compiled, either use Knit button R Studio build using build_article. build articles new (lazy = FALSE), specify correct local file path.","code":"# check if all articles build # (only use lazy = FALSE with correct file path to local files) pkgdown::build_articles(lazy = TRUE, preview = TRUE)  # check if single vignette builds # (path relative to vignettes folder with no file extension) pkgdown::build_article(\"subfolder/article_name\", preview = TRUE)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/package_development/package_maintenance.html","id":"package-website","dir":"Articles > Package_development","previous_headings":"Working on tools4watlas","what":"Package website","title":"Package maintenance","text":"package website build using pkgdown. ’s structure defined _pkgdown.yml. build docs folder. Please commit changes docs folder separately (make easier check changes). editing anything simply run lazy = TRUE. Otherwise, make sure correct file path articles rely local data. lazy = FALSE necessary run example new article added.","code":"# build site new without rebuilding all articles pkgdown::build_site(lazy = TRUE)  # rebuilds everything (only use with correct file path to local files) pkgdown::build_site()"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/package_development/package_maintenance.html","id":"checks-before-pushing-to-github","dir":"Articles > Package_development","previous_headings":"Working on tools4watlas","what":"Checks before pushing to GitHub","title":"Package maintenance","text":"Summarised steps check pushing GitHub. Give meaningful commit message commit everything docs folder website separately.","code":"# set working directory (not necessary if R Studio project) setwd(\"C:/Users/..path../tools4watlas\")  # lintr lintr::lint_package()  # document devtools::document()  # load all functions devtools::load_all()  # build readme (run only if changed) devtools::build_readme()  # tidy description usethis::use_tidy_description()  # R CMD check devtools::check()  # build website (lazy = TRUE only changes files that were edited) pkgdown::build_site(lazy = TRUE)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/smooth_and_thin_data.html","id":"median-smooth-data","dir":"Articles","previous_headings":"","what":"Median smooth data","title":"Smooth and thin data","text":"reduce error localization data, basic smoother median filter can applied. resulting table smoothed location stored x y column original location stored x_raw y_raw column.","code":"# Smooth the data data <- atl_median_smooth(data, moving_window = 5)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/smooth_and_thin_data.html","id":"recalculate-speed","dir":"Articles","previous_headings":"Median smooth data","what":"Recalculate speed","title":"Smooth and thin data","text":"smoothing data, speeds need recalculated. now also calculate turning angles. Note: distance smoothed positions can 0 therefore produce NAs warning","code":"# Recalculate speed data <- atl_get_speed(data, type = c(\"in\", \"out\"))"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/smooth_and_thin_data.html","id":"look-at-the-data","dir":"Articles","previous_headings":"Median smooth data > Recalculate speed","what":"Look at the data","title":"Smooth and thin data","text":"plot just shows one example. Smoothed track (black) top raw track (red)","code":"# subset first tag data_subset <- data[tag == data[1]$tag]  # subset some data to look at from <- min(data_subset[, datetime]) + 1 * 3600 to <- min(data_subset[, datetime]) + 12 * 3600 data_subset <- data_subset[datetime %between% c(from, to)]  # Create basemap bm <- atl_create_bm(data_subset)  # Plot bm +   geom_path(     data = data_subset, aes(x_raw, y_raw),     color = \"firebrick3\", linewidth = 0.5   ) +   geom_path(     data = data_subset, aes(x, y),     color = \"black\", linewidth = 0.5   ) +   geom_point(     data = data_subset, aes(x_raw, y_raw),     color = \"firebrick3\", size = 1.2   ) +   geom_point(     data = data_subset, aes(x, y),     color = \"black\", size = 1   )"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/smooth_and_thin_data.html","id":"save-data","dir":"Articles","previous_headings":"","what":"Save data","title":"Smooth and thin data","text":"","code":"# Save data fwrite(   data,   file = \"../inst/extdata/watlas_data_smoothed.csv\", yaml = TRUE )"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/smooth_and_thin_data.html","id":"thin-data","dir":"Articles","previous_headings":"","what":"Thin data","title":"Smooth and thin data","text":"Depending desired analysis, might make sense thin data, either aggregation subsampling. methods return fixed time steps (depending interval).","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/smooth_and_thin_data.html","id":"by-aggregation","dir":"Articles","previous_headings":"Thin data","what":"By aggregation","title":"Smooth and thin data","text":"Returns mean columns time step. additional column n_aggregated shows many locations aggregated location. Time datetime returned rounded interval.","code":"# Thin the data by aggregation with a 60-second interval thinned_aggregated <- atl_thin_data(   data = data,   interval = 60,   id_columns = c(\"tag\", \"species\"),   method = \"aggregate\" )  # Show head of selected data head(thinned_aggregated[, .(tag, time, datetime, x, y, n_aggregated)]) |>   knitr::kable(digits = 2)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/smooth_and_thin_data.html","id":"by-subsampling","dir":"Articles","previous_headings":"Thin data","what":"By subsampling","title":"Smooth and thin data","text":"Returns first location time step. additional column n_subsampled shows many locations location sampled.","code":"# Thin the data by subsampling with a 60-second interval thinned_subsampled <- atl_thin_data(   data = data,   interval = 60,   id_columns = c(\"tag\", \"species\"),   method = \"subsample\" )  # Show head of selected data head(thinned_subsampled[, .(tag, time, datetime, x, y, n_subsampled)]) |>   knitr::kable(digits = 2)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/animate_data.html","id":"load-packages","dir":"Articles > Visualization_tutorials","previous_headings":"","what":"Load packages","title":"Animate data","text":"","code":"# packages library(tools4watlas) library(ggplot2) library(viridis) library(foreach) library(doFuture) library(ragg) library(mapmate)  # additional to add water data library(terra) library(tidyterra) library(sf)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/animate_data.html","id":"prepare-movement-data","dir":"Articles > Visualization_tutorials","previous_headings":"","what":"Prepare movement data","title":"Animate data","text":"Set folder path png’s created, load data, create time steps desired interval (e.g. 10 min), delete existing files.","code":"# file path path <- \"C:/Users/jkrietsch/temp/animation\"  # load example data data <- data_example  # create time steps ts <- atl_time_steps(   datetime_vector = data$datetime,   time_interval = \"10 min\",   output_path = path )  # delete existing files (if any) unlink(paste0(path, \"/*\"), recursive = TRUE)"},{"path":[]},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/animate_data.html","id":"check-plot","dir":"Articles > Visualization_tutorials","previous_headings":"Simple animation of movements","what":"Check plot","title":"Animate data","text":"Make basemap desired plot data check outcome, scalebar time stamp. Adjust everything desired (check saving png defined size).","code":"# create basemap bm <- atl_create_bm(data, buffer = 800)  # plot points and tracks to check bm +   geom_path(     data = data, aes(x, y, colour = tag),     linewidth = 0.5, alpha = 0.1, show.legend = FALSE   ) +   geom_point(     data = data, aes(x, y, colour = tag),     size = 0.5, alpha = 1, show.legend = FALSE   ) +   # add time stamp   annotate(     \"text\",     x = -Inf, y = -Inf, hjust = -0.1, vjust = -2.4,     label = paste0(format(data[1]$datetime, \"%Y-%m-%d %H:%M\")), size = 4   )"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/animate_data.html","id":"loop-to-create-pngs-for-each-step","dir":"Articles > Visualization_tutorials","previous_headings":"Simple animation of movements","what":"Loop to create png’s for each step","title":"Animate data","text":"Create png step (check steps - many png’s created). Run first example step check (e.g. step <- 50) outcome one png. Depending number png’s, run first subset check everything desired, everything fine, run steps. desired color scale can simply added p. subset step, maximal tail length can chosen (, 6 h). use atl_alpha_along() create fading alpha atl_size_along() make comet shape - adjust parameters desired (see function description details). Afterwards add path basemap add time stamp.","code":"# register cores and backend for parallel processing registerDoFuture() plan(multisession)  # steps steps <- seq_len(nrow(ts))  # loop to create pngs for each time step foreach(i = steps) %dofuture% {    # define time step   time_step <- ts[i]$datetime # current date    # subset data   ds <- data[datetime %between% c(time_step - 3600 * 6, time_step)]    # create alpha and size   if (nrow(ds) > 0) {     ds[, a := atl_alpha_along(       datetime,       head = 30, skew = -2     ), by = tag]   }   if (nrow(ds) > 0) {     ds[, s := atl_size_along(       datetime,       head = 70, to = c(0.3, 2)     ), by = tag]   }    # add tracks to basemap   p <- bm +     geom_path(       data = ds, aes(x, y, color = tag), alpha = ds$a, linewidth = ds$s,       lineend = \"round\", show.legend = FALSE     ) +      # add time stamp     annotate(       \"text\",       x = -Inf, y = -Inf, hjust = -0.1, vjust = -2.4,       label = paste0(format(time_step, \"%Y-%m-%d %H:%M\")), size = 4     )    # save png   agg_png(     filename = ts[i, path],     width = 3840, height = 2160, units = \"px\", res = 300   )   print(p)   dev.off()  }  # close parallel workers plan(sequential)"},{"path":[]},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/animate_data.html","id":"add-tide-and-bathymetry-data","dir":"Articles > Visualization_tutorials","previous_headings":"Animation of movements with water level","what":"Add tide and bathymetry data","title":"Animate data","text":"add water level data ts know waterlevel step crop bathymetry data extend map (use buffer basemap).","code":"# file path to WATLAS teams data folder fp <- atl_file_path(\"watlas_teams\")  # sub path to tide data tidal_pattern_fp <- paste0(   fp, \"waterdata/allYears-tidalPattern-west_terschelling-UTC.csv\" ) measured_water_height_fp <- paste0(   fp, \"waterdata/allYears-gemeten_waterhoogte-west_terschelling-clean-UTC.csv\" )  # load tide data tidal_pattern <- fread(tidal_pattern_fp) measured_water_height <- fread(measured_water_height_fp)  # add unix time ts[, time := as.numeric(datetime)]  # add tide data to movement data ts <- atl_add_tidal_data(   data = ts,   tide_data = tidal_pattern,   tide_data_highres = measured_water_height,   waterdata_resolution = \"10 min\",   waterdata_interpolation = \"1 min\",   offset = 30 )  # file path to Birds, fish 'n chips GIS/rasters folder fp <- atl_file_path(\"rasters\")  # load bathymetry data bat <- rast(paste0(fp, \"bathymetry/2024/bodemhoogte_20mtr_UTM31_int.tif\"))  # bbox (should be buffer used for basemap) bbox <- atl_bbox(data, buffer = 800)  # crop the raster using the bounding box bat_c <- crop(bat, bbox)  # wrap to use in parallel loop bat_w <- wrap(bat_c)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/animate_data.html","id":"check-plot-1","dir":"Articles > Visualization_tutorials","previous_headings":"Animation of movements with water level","what":"Check plot","title":"Animate data","text":"Make basemap desired plot data check outcome, scalebar time stamp. Adjust everything desired (check saving png defined size).","code":"# create basemap bm <- atl_create_bm(   data,   buffer = 800, raster_data = bat_c, option = \"bathymetry\", scalebar = FALSE )  # extract example water level threshold <- 0 / 100 # water level at the time (/100 to scale to m) bat_m <- bat_c < threshold # mask below threshold (TRUE = 1) bat_m[bat_m == 0] <- NA # remove land waterline <- as.polygons(bat_m, values = TRUE, dissolve = TRUE) |>   st_as_sf() # extract polygon with water level  # check plot with all data bm +   # add water level   geom_sf(     data = waterline, fill = \"dodgerblue3\", alpha = 0.2,     color = scales::alpha(\"white\", 0.2), linewidth = 2   ) +   # add points and tracks   geom_path(     data = data, aes(x, y, colour = tag),     linewidth = 0.5, alpha = 0.1, show.legend = FALSE   ) +   geom_point(     data = data, aes(x, y, colour = tag),     size = 0.5, alpha = 1, show.legend = FALSE   ) +   # add time stamp   annotate(     \"text\",     x = -Inf, y = -Inf, hjust = -0.1, vjust = -2.4,     label = paste0(format(data[1]$datetime, \"%Y-%m-%d %H:%M\")), size = 4   ) +   # add scale bar   ggspatial::annotation_scale(     aes(location = \"br\"),     text_cex = 1, height = unit(0.3, \"cm\"),     pad_x = unit(0.4, \"cm\"), pad_y = unit(0.6, \"cm\")   ) +   # set extend again (overwritten by geom_sf)   coord_sf(     xlim = c(bbox[\"xmin\"], bbox[\"xmax\"]),     ylim = c(bbox[\"ymin\"], bbox[\"ymax\"]), expand = FALSE   )"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/animate_data.html","id":"loop-to-create-pngs-for-each-step-1","dir":"Articles > Visualization_tutorials","previous_headings":"Animation of movements with water level","what":"Loop to create png’s for each step","title":"Animate data","text":"just added water level polygon scale bar (needs added water).","code":"# register cores and backend for parallel processing registerDoFuture() plan(multisession)  # steps steps <- seq_len(nrow(ts))  # loop to create pngs for each time step foreach(i = steps) %dofuture% {    # define time step   time_step <- ts[i]$datetime # current date    # subset data   ds <- data[datetime %between% c(time_step - 3600 * 6, time_step)]    # create alpha and size   if (nrow(ds) > 0) {     ds[, a := atl_alpha_along(       datetime,       head = 30, skew = -2     ), by = tag]   }   if (nrow(ds) > 0) {     ds[, s := atl_size_along(       datetime,       head = 70, to = c(0.3, 2)     ), by = tag]   }    # extract water level   bat_c <- unwrap(bat_w)   threshold <- ts[i]$waterlevel / 100 # water level at the time (scale to m)   bat_m <- bat_c < threshold # mask below threshold (TRUE = 1)   bat_m[bat_m == 0] <- NA # remove land   waterline <- as.polygons(bat_m, values = TRUE, dissolve = TRUE) |>     st_as_sf() # extract polygon with water level    # add everything to the basemap   p <- bm +     # add water level     geom_sf(       data = waterline, fill = \"dodgerblue3\", alpha = 0.2,       color = scales::alpha(\"white\", 0.2), linewidth = 2     ) +     # add track     geom_path(       data = ds, aes(x, y, color = tag), alpha = ds$a, linewidth = ds$s,       lineend = \"round\", show.legend = FALSE     ) +     # add time stamp     annotate(       \"text\",       x = -Inf, y = -Inf, hjust = -0.1, vjust = -2.4,       label = paste0(format(time_step, \"%Y-%m-%d %H:%M\")), size = 4     ) +     # add scale bar     ggspatial::annotation_scale(       aes(location = \"br\"),       text_cex = 1, height = unit(0.3, \"cm\"),       pad_x = unit(0.4, \"cm\"), pad_y = unit(0.6, \"cm\")     ) +     # set extend again (overwritten by geom_sf)     coord_sf(       xlim = c(bbox[\"xmin\"], bbox[\"xmax\"]),       ylim = c(bbox[\"ymin\"], bbox[\"ymax\"]), expand = FALSE     )    # save png   agg_png(     filename = ts[i, path],     width = 3840, height = 2160, units = \"px\", res = 300   )   print(p)   dev.off()  }  # close parallel workers plan(sequential)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/animate_data.html","id":"make-a-animation-using-ffmpeg-via-mapmate","dir":"Articles > Visualization_tutorials","previous_headings":"Animation of movements with water level","what":"Make a animation using ffmpeg via mapmate","title":"Animate data","text":"Adjust frame rate (rate) desired (depending time step interval). File created path, can also changed desired.","code":"# make animation ffmpeg(   dir = path, output_dir = path, pattern = atl_ffmpeg_pattern(ts[1]$path),   output = \"Animation.mp4\", rate = 8, details = TRUE, overwrite = TRUE )"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/create_basemap.html","id":"load-packages","dir":"Articles > Visualization_tutorials","previous_headings":"","what":"Load packages","title":"Create a basemap","text":"","code":"# packages library(tools4watlas) library(ggplot2)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/create_basemap.html","id":"using-ggplot2-and-a-basemap-layer","dir":"Articles > Visualization_tutorials","previous_headings":"","what":"Using ggplot2 and a basemap layer","title":"Create a basemap","text":"One can create simple basemaps study area using function atl_create_bm(). function uses data.table x- y-coordinates check required bounding box (can extended buffer meters) spatial features (polygons) land, lakes, mudflats rivers. Without adding spatial data, default spatial data provided package. changing asp desired aspect ratio can chosen (default “16:9”). resulting map always EPSG:32631 (WGS 84 / UTM zone 31N), data can provided projections, needs specified projection.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/create_basemap.html","id":"basemap-independent-of-movement-data","dir":"Articles > Visualization_tutorials","previous_headings":"Using ggplot2 and a basemap layer","what":"Basemap independent of movement data","title":"Create a basemap","text":"can useful one wants zoom specific area plot area interest, movement data also go range. data provided function creates map around Griend (main study site) specified buffer.  Alternatively, one can provide table one multiple locations, used buffer map. can example location EPSG:4326 (WGS 84 degrees) can exacted Google Maps right click specific location. choose point bit east Griend, include Richel Ballastplaat map.","code":"# create basemap bm <- atl_create_bm(buffer = 30000)  # plot bm # define location location <- data.table(x = c(5.275), y = c(53.2523))  # create basemap bm <- atl_create_bm(location, buffer = 7000, projection = sf::st_crs(4326))  # plot bm"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/create_basemap.html","id":"basemap-with-extend-of-movement-data","dir":"Articles > Visualization_tutorials","previous_headings":"Using ggplot2 and a basemap layer","what":"Basemap with extend of movement data","title":"Create a basemap","text":"","code":"# load example data data <- data_example  # create basemap bm <- atl_create_bm(data, buffer = 1000)  # plot bm +   geom_point(data = data, aes(x, y), alpha = 0.1, color = \"darkorange\")"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/create_basemap.html","id":"basemap-with-bathymetry-data","dir":"Articles > Visualization_tutorials","previous_headings":"","what":"Basemap with bathymetry data","title":"Create a basemap","text":"Bathymetry data can found “Birds, fish ’n chips” SharePoint folder: Documents/data/GIS/rasters/. run script set file path (fp) local copy folder computer. data can also downloaded Waddenregister.  can also add shading (shade = TRUE) bathymetry data highlight water depth better. Note calculating shade can take , especially large maps. , use option polished maps.","code":"# additional packages library(terra)  # file path to Birds, fish 'n chips GIS/rasters folder fp <- atl_file_path(\"rasters\")  # load bathymetry data bat <- rast(paste0(fp, \"bathymetry/2024/bodemhoogte_20mtr_UTM31_int.tif\"))  # create base map with bathymetry data bm <- atl_create_bm(   buffer = 5000, raster_data = bat, option = \"bathymetry\" )  # plot bm # additional packages library(terra)  # file path to Birds, fish 'n chips GIS/rasters folder fp <- atl_file_path(\"rasters\")  # load bathymetry data bat <- rast(paste0(fp, \"bathymetry/2024/bodemhoogte_20mtr_UTM31_int.tif\"))  # create base map with bathymetry data bm <- atl_create_bm(   buffer = 5000, raster_data = bat, option = \"bathymetry\", shade = TRUE )  # plot bm"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/create_basemap.html","id":"basemap-with-openstreetmap","dir":"Articles > Visualization_tutorials","previous_headings":"","what":"Basemap with OpenStreetMap","title":"Create a basemap","text":"Provides range different basemap options. first transform data WGS 84 extract basemap bounding box transform data Mercator projection plot data top map. Unfortunately, sometimes type = \"bing\" (satellite image) work.","code":"# additional packages library(OpenStreetMap) library(sf)  # load example data data <- data_example  # make data spatial and transform projection to WGS 84 (used in osm) d_sf <- atl_as_sf(data, additional_cols = c(\"tag\", \"datetime\")) d_sf <- st_transform(d_sf, crs = st_crs(4326))  # get bounding box bbox <- atl_bbox(d_sf, asp = \"16:9\", buffer = 10000)  # extract openstreetmap # other 'type' options are \"osm\", \"maptoolkit-topo\", \"bing\", \"stamen-toner\", # \"stamen-watercolor\", \"esri\", \"esri-topo\", \"nps\", \"apple-iphoto\", \"skobbler\"; map <- openmap(   c(bbox[\"ymax\"], bbox[\"xmin\"]),   c(bbox[\"ymin\"], bbox[\"xmax\"]),   type = \"osm\", mergeTiles = TRUE )  bm <- autoplot.OpenStreetMap(map)  # transform points to Mercator and add transformed coordinates to data d_sf <- st_transform(d_sf, crs = sf::st_crs(3857)) osm_coords <- st_coordinates(d_sf) data[, `:=`(x_osm = osm_coords[, 1], y_osm = osm_coords[, 2])]  # plot bm +   geom_point(     data = data, aes(x_osm, y_osm), alpha = 0.1, color = \"darkorange\"   ) +   coord_sf(crs = 3857, expand = FALSE) +   theme(     axis.title = element_blank(),     axis.text = element_blank(),     axis.ticks = element_blank(),     panel.grid.major = element_blank(),     panel.grid.minor = element_blank()   )"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/create_basemap.html","id":"additional-features","dir":"Articles > Visualization_tutorials","previous_headings":"","what":"Additional features","title":"Create a basemap","text":"add WATLAS logo receivers base map.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/create_basemap.html","id":"add-watlas-logo-to-a-basemap","dir":"Articles > Visualization_tutorials","previous_headings":"Additional features","what":"Add WATLAS logo to a basemap","title":"Create a basemap","text":"","code":"# additional packages library(ggimage)  # load example data data <- data_example  # create basemap bm <- atl_create_bm(data, buffer = 1000)  # path to WATLAS logo logo_path <- system.file(   \"extdata\", \"watlas_logo.png\",   package = \"tools4watlas\" )  # define position based on data (here upper left corner) # adjust as desired x_pos <- min(data$x) - 2500 y_pos <- max(data$y)  # create table with image of the logo di <- data.table(x = x_pos, y = y_pos, image = logo_path)  # plot basemap with logo bm +   geom_image(data = di, aes(x, y, image = image), size = 0.2)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/create_basemap.html","id":"add-watlas-receivers-to-a-basemap","dir":"Articles > Visualization_tutorials","previous_headings":"Additional features","what":"Add WATLAS receivers to a basemap","title":"Create a basemap","text":"Receiver data managed Allert. located “WATLAS” SharePoint folder: Documents/data/. Either specify path local copy folder add path user atl_file_path() function.  One can also add name receiver.","code":"# load example data data <- data_example  # create basemap bm <- atl_create_bm(data, buffer = 20000)  # file path to WATLAS teams data folder fp <- atl_file_path(\"watlas_teams\")  # load receivers data dr <- readxl::read_excel(   paste0(fp, \"receivers/receiver specifications.xlsx\"),   sheet = \"receivers\" ) |>   data.table()  # end date for active receivers as system date dr[active == \"ja\", date_removed := as.POSIXct(Sys.time(), tz = \"UTC\")]  # subset all active in period of tracking data start <- min(data$datetime) end <- max(data$datetime)  # Check if each row includes period of tracking data dr[, includes_data := (date_placed <= end & date_removed >= start)] dr <- dr[includes_data == TRUE]  # plot basemap with receivers active during tracking period bm +   geom_point(data = dr, aes(x, y), pch = 17) # additional packages library(ggrepel)  # plot basemap with receivers and label bm +   geom_point(data = dr, aes(x, y), pch = 17, size = 1.5) +   geom_text_repel(     data = dr, aes(x, y, label = location),     max.overlaps = Inf,     size = 3,     point.padding = 0.5,     segment.color = \"grey50\"   )"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/plot_data.html","id":"load-packages","dir":"Articles > Visualization_tutorials","previous_headings":"","what":"Load packages","title":"Plot data","text":"","code":"# packages library(tools4watlas) library(ggplot2) library(viridis) library(scales)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/plot_data.html","id":"plot-grouped-by-tag-id","dir":"Articles > Visualization_tutorials","previous_headings":"","what":"Plot grouped by tag ID","title":"Plot data","text":"Simply colour points path tag ID.","code":"# load example data data <- data_example  # create basemap bm <- atl_create_bm(data, buffer = 800)  # plot points and tracks with standard ggplot colours bm +   geom_path(     data = data, aes(x, y, colour = tag),     linewidth = 0.5, alpha = 0.1, show.legend = FALSE   ) +   geom_point(     data = data, aes(x, y, colour = tag),     size = 0.5, alpha = 1, show.legend = FALSE   ) # plot points and tracks with viridis colour scale bm +   geom_path(     data = data, aes(x, y, colour = tag),     linewidth = 0.5, alpha = 0.1, show.legend = FALSE   ) +   geom_point(     data = data, aes(x, y, colour = tag),     size = 0.5, alpha = 1, show.legend = FALSE   ) +   scale_color_viridis(discrete = TRUE)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/plot_data.html","id":"plot-grouped-by-species","dir":"Articles > Visualization_tutorials","previous_headings":"","what":"Plot grouped by species","title":"Plot data","text":"tools4watlas includes specific species colours atl_spec_cols() function species labels atl_spec_labs() function.","code":"# load example data data <- data_example  # create basemap bm <- atl_create_bm(data, buffer = 800)  # plot points and tracks bm +   geom_path(     data = data, aes(x, y, colour = species),     linewidth = 0.5, alpha = 0.5, show.legend = FALSE   ) +   geom_point(     data = data, aes(x, y, color = species),     size = 1, alpha = 1, show.legend = TRUE   ) +   scale_color_manual(     values = atl_spec_cols(),     labels = atl_spec_labs(\"multiline\"),     name = \"\"   ) +   guides(colour = guide_legend(     nrow = 1, override.aes = list(size = 7, pch = 16, alpha = 1)   )) +   theme(     legend.position = \"top\",     legend.justification = \"center\",     legend.key = element_blank(),     legend.background = element_rect(fill = \"transparent\")   )"},{"path":[]},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/plot_data.html","id":"template-for-a-customizable-plot-of-one-tag","dir":"Articles > Visualization_tutorials","previous_headings":"Plot single plots by tag ID","what":"Template for a customizable plot of one tag","title":"Plot data","text":"","code":"# load example data data <- data_example  # subset bar-tailed godwit data_subset <- data[species == \"bar-tailed godwit\"]  # create basemap bm <- atl_create_bm(data_subset, buffer = 800)  # plot points and tracks bm +   geom_path(     data = data_subset, aes(x, y),     linewidth = 0.5, alpha = 0.1, show.legend = FALSE   ) +   geom_point(     data = data_subset, aes(x, y),     size = 0.5, alpha = 1, show.legend = FALSE   )"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/plot_data.html","id":"simple-preset-plots-to-check-the-data","dir":"Articles > Visualization_tutorials","previous_headings":"Plot single plots by tag ID","what":"Simple preset plots to check the data","title":"Plot data","text":"atl_check_tag() function can used quickly check data one tag. provides five different options colouring track: \"datetime\": Datetime along track \"nbs\": Number receiver (base) stations contributed localization \"var\": Error maximal variance varx vary \"speed_in\": Speed m/s \"gap\": Gaps coloured time point size scale can coloured options viridis (default: \"\") specifying scale_option. scale can also transformed scale_trans example using \"log\" \"sqrt\". First last point can highlighted (highlight_first highlight_last) just specific number points beginning end track can selected (first_n last_n).","code":"# path to csv with filtered data data_path <- system.file(   \"extdata\", \"watlas_data_filtered.csv\",   package = \"tools4watlas\" )  # load data data <- fread(data_path, yaml = TRUE)  # subset bar-tailed godwit data <- data[species == \"bar-tailed godwit\"]  # plot option datetime atl_check_tag(   data,   option = \"datetime\",   highlight_first = TRUE, highlight_last = TRUE ) # plot option speed_in atl_check_tag(data, option = \"speed_in\") # plot option nbs atl_check_tag(data, option = \"nbs\") # plot option sd atl_check_tag(data, option = \"var\") # plot option gap atl_check_tag(data, option = \"gap\", scale_trans = \"log\")"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/plot_data.html","id":"plot-heatmaps","dir":"Articles > Visualization_tutorials","previous_headings":"","what":"Plot heatmaps","title":"Plot data","text":"round data (e.g. 200 m) plot number positions per location.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/plot_data.html","id":"all-positions","dir":"Articles > Visualization_tutorials","previous_headings":"Plot heatmaps","what":"All positions","title":"Plot data","text":"quick way get overview data.","code":"# load example data data <- data_example  # create basemap bm <- atl_create_bm(data, buffer = 800)  # round data to 1 ha (100x100 meter) grid cells data[, c(\"x_round\", \"y_round\") := list(   plyr::round_any(x, 100),   plyr::round_any(y, 100) )]  # N by location data_subset <- data[, .N, by = c(\"x_round\", \"y_round\")]  # plot heatmap bm +   geom_tile(     data = data_subset, aes(x_round, y_round, fill = N),     linewidth = 0.1, show.legend = TRUE   ) +   scale_fill_viridis(     option = \"A\", discrete = FALSE, trans = \"log10\", name = \"N positions\",     breaks = trans_breaks(\"log10\", function(x) 10^x),     labels = trans_format(\"log10\", math_format(10^.x)),     direction = -1   )"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/plot_data.html","id":"positions-by-species","dir":"Articles > Visualization_tutorials","previous_headings":"Plot heatmaps","what":"Positions by species","title":"Plot data","text":"group data species (whatever group desire) make plot groups.","code":"# N by location and species data_subset <- data[, .N, by = c(\"x_round\", \"y_round\", \"species\")]  # plot heatmap by species bm +   geom_tile(     data = data_subset, aes(x_round, y_round, fill = N),     linewidth = 0.1, show.legend = TRUE   ) +   scale_fill_viridis(     option = \"A\", discrete = FALSE, trans = \"log10\", name = \"N positions\",     breaks = trans_breaks(\"log10\", function(x) 10^x),     labels = trans_format(\"log10\", math_format(10^.x)),     direction = -1   ) +   facet_wrap(~species, labeller = as_labeller(atl_spec_labs(\"singleline\")))"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/plot_data_base_R.html","id":"load-packages","dir":"Articles > Visualization_tutorials","previous_headings":"","what":"Load packages","title":"Plot data in base R","text":"article shows plot WATLAS data base R","code":"# packages library(tools4watlas)"},{"path":[]},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/plot_data_base_R.html","id":"plot-with-simple-base-map","dir":"Articles > Visualization_tutorials","previous_headings":"Base R plotting","what":"Plot with simple base map","title":"Plot data in base R","text":"plotting region can extended specifiying buffer (meters), scale scalebar (kilometers) can adjusted. inspect localizations, color_by can specified colour localizations time since first localization plot (“time”), standard deviation x- y-coordinate (“sd”), number base stations used calculating localization (“nbs”). specifiying full path file name (extension) fullname, possible save plot .png. necesarry, legend can also located elsewhere plot Legend. Base R map","code":"# load example data data <- data_example[tag == data_example[1, tag]]  # transform to sf d_sf <- atl_as_sf(data, additional_cols = names(data))  # plot the tracking data with a simple background atl_plot_tag(   data = d_sf, tag = NULL, fullname = NULL, buffer = 1,   color_by = \"time\" ) ## [1] \"Ensure that data has the UTM 31N coordinate reference system.\" # note: function opens device and therefore the plot is not shown in markdown"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/plot_data_base_R.html","id":"plot-with-openstreetmap","dir":"Articles > Visualization_tutorials","previous_headings":"Base R plotting","what":"Plot with OpenStreetMap","title":"Plot data in base R","text":"function atl_plot_tag_osm() possible plot track satellite image library OpenStreetMap. region satellite image can extended specifying buffer (meters) function atl_bbox options similar atl_plot_tag (see earlier). Base R map satellite image","code":"library(OpenStreetMap) library(sf)  # load example data data <- data_example[tag == data_example[1, tag]]  # make data spatial and transform projection to WGS 84 (used in osm) d_sf <- atl_as_sf(data, additional_cols = names(data)) d_sf <- sf::st_transform(d_sf, crs = sf::st_crs(4326))  # get bounding box bbox <- atl_bbox(d_sf, buffer = 500)  # extract openstreetmap # other 'type' options are \"osm\", \"maptoolkit-topo\", \"bing\", \"stamen-toner\", # \"stamen-watercolor\", \"esri\", \"esri-topo\", \"nps\", \"apple-iphoto\", \"skobbler\"; map <- OpenStreetMap::openmap(c(bbox[\"ymax\"], bbox[\"xmin\"]),   c(bbox[\"ymin\"], bbox[\"xmax\"]),   type = \"osm\", mergeTiles = TRUE )  # plot the tracking data on the satellite image atl_plot_tag_osm(   data = d_sf, tag = NULL, mapID = map, color_by = \"time\",   fullname = NULL, scalebar = 3 )"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/plot_data_faster.html","id":"the-necessary-content-of-the-plot","dir":"Articles > Visualization_tutorials","previous_headings":"","what":"The necessary content of the plot","title":"Plot data faster","text":"want plot data? quick look publication? want see plot? overview positions specific part track? Depending answers choose smallest suitable dataset. example, thinning data (e.g. one 10-min intervals) can greatly reduce number localization plotted therefore speed plotting. plotting lot data, can better plot heat map (fastest way plotting many localization) many single points just overlap anyway seen ultimately.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/plot_data_faster.html","id":"plotting-performance","dir":"Articles > Visualization_tutorials","previous_headings":"","what":"Plotting performance","title":"Plot data faster","text":"One way speed plotting switch R standard grDevices ragg, provides graphic devices R based AGG library provides higher performance (40% faster) higher quality standard raster devices. ragg can used graphic back-end RStudio device choosing AGG backend graphics pane general options (see). speed plotting ggplot2, helps plot points simply pch = \".\", use geom_scattermore(), summarize locations plot heat map. See examples option. Note run time end chunk seen relative faster code complied, simply run.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/plot_data_faster.html","id":"load-packages-and-data","dir":"Articles > Visualization_tutorials","previous_headings":"","what":"Load packages and data","title":"Plot data faster","text":"vignette shows different ways plot WATLAS data. chunk code requires chunk loading data run otherwise independent.","code":"# packages library(tools4watlas) library(data.table) library(sf) library(ggplot2) library(scattermore) library(scales) library(viridis)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/plot_data_faster.html","id":"create-dummy-tracking-data-and-base-map","dir":"Articles > Visualization_tutorials","previous_headings":"","what":"Create dummy tracking data and base map","title":"Plot data faster","text":"Create dummy tracks 300 individuals 1000 steps (3000.000 points).","code":"# set seed for reproducibility set.seed(123)  # define parameters n_individuals <- 300 # number of individuals interval <- 6 # time interval in seconds n_steps <- 1000 # number of time steps per individual  # reference location (Griend) in UTM Zone 31N griend <- st_sfc(st_point(c(5.2525, 53.2523)), crs = st_crs(4326)) |>   st_transform(crs = st_crs(32631)) |>   st_coordinates()  # generate initial positions initial_positions <- data.table(   tag = 1:n_individuals,   x = rnorm(n_individuals, mean = griend[1], sd = 50),   y = rnorm(n_individuals, mean = griend[2], sd = 50) )  # create tracking data data <- rbindlist(lapply(1:n_individuals, function(id) {   # generate timestamps   timestamps <- seq.POSIXt(     from = Sys.time(), by = interval, length.out = n_steps   )    # simulate movement with small random steps   x_mov <- cumsum(runif(n_steps, -100, 100))   y_mov <- cumsum(runif(n_steps, -100, 100))    # compute positions   x <- initial_positions[tag == id, x] + x_mov   y <- initial_positions[tag == id, y] + y_mov    data.table(tag = as.character(id), x = x, y = y, datetime = timestamps) }))  # create basemap bm <- atl_create_bm(data, buffer = 3000)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/plot_data_faster.html","id":"standard-ggplot2-with-points-and-tracks","dir":"Articles > Visualization_tutorials","previous_headings":"","what":"Standard ggplot2 with points and tracks","title":"Plot data faster","text":"","code":"# start time st <- Sys.time()  # plot bm +   geom_path(     data = data, aes(x, y, colour = tag), alpha = 0.1,     show.legend = FALSE   ) +   geom_point(     data = data, aes(x, y, colour = tag), size = 0.5,     show.legend = FALSE   ) +   scale_colour_viridis(discrete = TRUE) # run time round(Sys.time() - st, 2) ## Time difference of 6.15 secs"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/plot_data_faster.html","id":"ggplot2-with-points-as-pch---and-tracks","dir":"Articles > Visualization_tutorials","previous_headings":"","what":"ggplot2 with points as pch = “.” and tracks","title":"Plot data faster","text":"","code":"# start time st <- Sys.time()  # plot bm +   geom_path(     data = data, aes(x, y, colour = tag), alpha = 0.1,     show.legend = FALSE   ) +   geom_point(     data = data, aes(x, y, colour = tag), pch = \".\", size = 0.5,     show.legend = FALSE   ) +   scale_colour_viridis(discrete = TRUE) # run time round(Sys.time() - st, 2) ## Time difference of 2.21 secs"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/plot_data_faster.html","id":"ggplot2-with-points-as-geom_scattermore-and-tracks","dir":"Articles > Visualization_tutorials","previous_headings":"","what":"ggplot2 with points as geom_scattermore() and tracks","title":"Plot data faster","text":"","code":"# start time st <- Sys.time()  # plot bm +   geom_path(     data = data, aes(x, y, colour = tag), alpha = 0.1,     show.legend = FALSE   ) +   geom_scattermore(     data = data, aes(x, y, colour = tag), pch = \".\", size = 0.5,     show.legend = FALSE   ) +   scale_colour_viridis(discrete = TRUE) # run time round(Sys.time() - st, 2) ## Time difference of 1.7 secs"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/plot_data_faster.html","id":"ggplot2-summarized-points-in-heat-map","dir":"Articles > Visualization_tutorials","previous_headings":"","what":"ggplot2 summarized points in heat map","title":"Plot data faster","text":"larger grid cell size, faster.","code":"# round data to 1 ha (100x100 meter) grid cells data[, c(\"x_round\", \"y_round\") := list(   plyr::round_any(x, 100),   plyr::round_any(y, 100) )]  # N by location data_subset <- data[, .N, by = c(\"x_round\", \"y_round\")]  # start time st <- Sys.time()  # plot heat map bm +   geom_tile(     data = data_subset, aes(x_round, y_round, fill = N),     linewidth = 0.1, show.legend = TRUE   ) +   scale_fill_viridis(     option = \"A\", discrete = FALSE, trans = \"log10\", name = \"N positions\",     breaks = trans_breaks(\"log10\", function(x) 10^x),     labels = trans_format(\"log10\", math_format(10^.x)),     direction = -1   ) # run time round(Sys.time() - st, 2) ## Time difference of 0.27 secs"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/plot_data_faster.html","id":"fast-saving-with-ragg","dir":"Articles > Visualization_tutorials","previous_headings":"","what":"Fast saving with ragg","title":"Plot data faster","text":"Example save png 16:9 4 k.","code":"# example plot p <- atl_create_bm(buffer = 5000)  # save png agg_png(   filename = \"path/to/file/name.png\",   width = 3840, height = 2160, units = \"px\", res = 300 ) print(p) dev.off()"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/plot_data_interactively.html","id":"load-packages","dir":"Articles > Visualization_tutorials","previous_headings":"","what":"Load packages","title":"Plot data interactively","text":"","code":"# packages library(tools4watlas) library(mapview)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/plot_data_interactively.html","id":"interactive-plot-for-one-individual","dir":"Articles > Visualization_tutorials","previous_headings":"","what":"Interactive plot for one individual","title":"Plot data interactively","text":"Subset individual choice transform sf additional columns choice (can seen clicking point). Colour track selecting desired parameter zcol.","code":"# load example data from one tide data <- data_example[tideID == \"2023513\"]  # subset data data_subset <- data[tag == \"3063\"]  # make data spatial d_sf <- atl_as_sf(   data_subset,   additional_cols = c(\"species\", \"datetime\", \"speed_in\", \"nbs\", \"waterlevel\") )  # add track d_sf_lines <- atl_as_sf(   data_subset,   additional_cols = c(\"species\", \"datetime\", \"speed_in\", \"nbs\", \"waterlevel\"),   option = \"lines\" )  # plot interactive map mapview(d_sf_lines, zcol = \"speed_in\", legend = FALSE) +   mapview(d_sf, zcol = \"speed_in\")"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/plot_data_interactively.html","id":"interactive-plot-for-multiple-individuals","dir":"Articles > Visualization_tutorials","previous_headings":"","what":"Interactive plot for multiple individuals","title":"Plot data interactively","text":"one wants plot lot data, recommended thin data first.","code":"# load example data data <- data_example  # thin the data by subsampling with a 60-second interval data <- atl_thin_data(   data = data,   interval = 60,   id_columns = c(\"tag\", \"species\"),   method = \"subsample\" )  # make data spatial d_sf <- atl_as_sf(data, additional_cols = c(\"datetime\", \"species\"))  # add track d_sf_lines <- atl_as_sf(   data,   additional_cols = c(\"species\"),   option = \"lines\" )  # plot interactive map mapview(d_sf_lines, zcol = \"tag\", legend = FALSE) +   mapview(d_sf, zcol = \"tag\")"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/plot_data_interactively.html","id":"interactive-plot-for-multiple-species","dir":"Articles > Visualization_tutorials","previous_headings":"","what":"Interactive plot for multiple species","title":"Plot data interactively","text":"","code":"# load example data from one tide data <- data_example[tideID == \"2023513\"]  # thin the data by subsampling with a 60-second interval data <- atl_thin_data(   data = data,   interval = 60,   id_columns = c(\"tag\", \"species\"),   method = \"subsample\" )  # make data spatial d_sf <- atl_as_sf(data, additional_cols = c(\"datetime\", \"species\"))  # add track d_sf_lines <- atl_as_sf(   data,   additional_cols = c(\"species\"),   option = \"lines\" )  # plot interactive map mapview(d_sf_lines, zcol = \"species\", legend = FALSE) +   mapview(d_sf, zcol = \"species\")"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/plot_data_in_loop.html","id":"load-packages","dir":"Articles > Visualization_tutorials","previous_headings":"","what":"Load packages","title":"Plot data in loop","text":"","code":"# packages library(tools4watlas) library(ggplot2) library(foreach) library(doFuture)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/plot_data_in_loop.html","id":"plot-and-save-data-in-loop-by-tag-id","dir":"Articles > Visualization_tutorials","previous_headings":"","what":"Plot and save data in loop by tag ID","title":"Plot data in loop","text":"Example simple loop tag ID using atl_check_tag(). Example make type ggplot save data ragg.","code":"# load example data data <- data_example  # file path path <- \"./outputs/maps_by_tag/tag_\"  # unique ID (here by tag) id <- unique(data$tag)  # loop to make plots for all foreach(i = id) %do% {    # subset data   data_subset <- data[tag == i]    # plot and save data   atl_check_tag(     data_subset,     option = \"datetime\",     highlight_first = TRUE, highlight_last = TRUE,     filename = paste0(path, data_subset[1]$species, \"_tag_\", i)   )  } # load example data data <- data_example  # file path path <- \"./outputs/maps_by_tag/tag_\"  # unique ID (here by tag) id <- unique(data$tag)  # loop to make plots for all foreach(i = id) %do% {    # subset data   data_subset <- data[tag == i]    # plot data   p <- ggplot()    # save   agg_png(     filename = paste0(path, i, \".png\"),     width = 3840, height = 2160, units = \"px\", res = 300   )   print(p)   dev.off()  }"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/plot_data_in_loop.html","id":"plot-and-save-data-in-parallel-loop-by-tag-id","dir":"Articles > Visualization_tutorials","previous_headings":"","what":"Plot and save data in parallel loop by tag ID","title":"Plot data in loop","text":"can use structure, simply replacing %% %dofuture%, key advantage using foreach. additional step setting parallel processing registerDoFuture() plan(multisession).","code":"# load example data data <- data_example  # file path path <- \"./outputs/maps_by_tag/\"  # unique ID (here by tag) id <- unique(data$tag)  # register cores and backend for parallel processing registerDoFuture() plan(multisession)  # loop to make plots for all foreach(i = id) %dofuture% {    # subset data   data_subset <- data[tag == i]    # plot and save data   atl_check_tag(     data_subset,     option = \"datetime\",     highlight_first = TRUE, highlight_last = TRUE,     filename = paste0(path, data_subset[1]$species, \"_tag_\", i)   )  }  # close parallel workers plan(sequential)"},{"path":"https://allertbijleveld.github.io/tools4watlas/articles/visualization_tutorials/plot_data_in_loop.html","id":"plot-and-save-data-in-parallel-loop-by-tag-id-and-tide-id","dir":"Articles > Visualization_tutorials","previous_headings":"","what":"Plot and save data in parallel loop by tag ID and tide ID","title":"Plot data in loop","text":"","code":"# load example data data <- data_example  # file path path <- \"./outputs/maps_by_tag_and_tide/\"  # unique ID combinations idc <- unique(data[, c(\"species\", \"tag\", \"tideID\")])  # register cores and backend for parallel processing registerDoFuture() plan(multisession)  # loop to make plots for all foreach(i = seq_len(nrow(idc))) %dofuture% {    # subset data   data_subset <- data[tag == idc$tag[i] & tideID == idc$tideID[i]]    # plot and save data   atl_check_tag(     data_subset,     option = \"datetime\",     highlight_first = TRUE, highlight_last = TRUE,     filename = paste0(       path, idc$species[i], \"_tag_\", idc$tag[i], \"_tide_\", idc$tideID[i]     )   )  }  # close parallel workers plan(sequential)"},{"path":"https://allertbijleveld.github.io/tools4watlas/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Johannes Krietsch. Author. Pratik Gupte. Author. Christine Beardsworth. Author. Allert Bijleveld. Author, maintainer.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Krietsch J, Gupte P, Beardsworth C, Bijleveld (2025). tools4watlas: Tools Processing WATLAS Tracking Data. R package version 2.0, https://allertbijleveld.github.io/tools4watlas/.","code":"@Manual{,   title = {tools4watlas: Tools for Processing WATLAS Tracking Data},   author = {Johannes Krietsch and Pratik Gupte and Christine Beardsworth and Allert Bijleveld},   year = {2025},   note = {R package version 2.0},   url = {https://allertbijleveld.github.io/tools4watlas/}, }"},{"path":"https://allertbijleveld.github.io/tools4watlas/index.html","id":"tools4watlas-","dir":"","previous_headings":"","what":"Tools for Processing WATLAS Tracking Data","title":"Tools for Processing WATLAS Tracking Data","text":"goal tools4watlas provide tools getting, processing plotting WATLAS tracking data. information WATLAS tracking system can found Bijleveld et al. 2022. WATLAS: high-throughput real-time tracking many small birds Dutch Wadden Sea.. Visit https://www.nioz.nl/watlas follow tracked birds real time read latest project news. package tools4watlas builds package atlastools (Gupte et al. 2021. Guide Pre-processing High-throughput Animal Tracking Data.). tools4watlas, improved data processing functions atlastools efficient approach using data.table tag ID. change enhances memory efficiency significantly speeds processing large datasets. Additionally, tools4watlas includes functions integrate tidal raster data (e.g. bathymetry), functions tutorials visualize movement data.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Tools for Processing WATLAS Tracking Data","text":"tools4watlas package thoroughly documented official package website. package vignettes outline basic workflow working WATLAS data, extended workflows guide specialized analyses. Additionally, provide visualization tutorials demonstrate various methods plotting animating movement data. package development section offers insights package maintenance contribute tools4watlas package. completely run articles (marked asterisk) access local NIOZ file server required. Basic workflow (Vignettes): Load check data Filter data - based spatial boundaries, temporal specifications, error estimates speed. Smooth thin data Extended workflow: Add tidal bathymetry data* Add residency patches - work progress. Add SIBES data - work progress. Visualization tutorials: Create basemap - (Bathymetry basemap option*) Plot data - important step stages check data. Plot data loop - quick way make plots tag ID. Fast plotting ggplot2 Plot data interactively Animate data Package development: Package maintenance - describes work tools4watlas. Basemap data* - describes basemap data extracted can guide user creating customized base maps. tools4watlas logo - describes tools4watlas logo made. *requires access local NIOZ file server","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for Processing WATLAS Tracking Data","text":"can install latest version tools4watlas GitHub :","code":"library(remotes) install_github(\"allertbijleveld/tools4watlas\")"},{"path":"https://allertbijleveld.github.io/tools4watlas/index.html","id":"example-data","dir":"","previous_headings":"","what":"Example data","title":"Tools for Processing WATLAS Tracking Data","text":"Example tracks one individual species two tide cycles","code":"library(tools4watlas) library(ggplot2)  # Load example data data <- data_example  # Create base map bm <- atl_create_bm(data, buffer = 800)  # Plot points and tracks bm +   geom_path(     data = data, aes(x, y, colour = species),     linewidth = 0.5, alpha = 0.5, show.legend = FALSE   ) +   geom_point(     data = data, aes(x, y, color = species),     size = 0.5, alpha = 0.5, show.legend = TRUE   ) +   scale_color_manual(     values = atl_spec_cols(),     labels = atl_spec_labs(\"multiline\"),     name = \"\"   ) +   guides(colour = guide_legend(     nrow = 1, override.aes = list(size = 7, pch = 16, alpha = 1)   )) +   theme(     legend.position = \"top\",     legend.justification = \"center\",     legend.key = element_blank(),     legend.background = element_rect(fill = \"transparent\")   )"},{"path":"https://allertbijleveld.github.io/tools4watlas/index.html","id":"work-in-progress","dir":"","previous_headings":"","what":"Work in progress","title":"Tools for Processing WATLAS Tracking Data","text":"examples workflows aimed processing, plotting adding environmental data WATLAS tracking data prepared. request, please contact Allert Bijleveld. working following articles moment: Residency patch analysis Connect WATLAS SIBES data","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/index.html","id":"contribute","dir":"","previous_headings":"","what":"Contribute","title":"Tools for Processing WATLAS Tracking Data","text":"want contribute tools4watlas fork repository GitHub submit pull request. Besides clear bug fixes, best discuss potential changes additions Allert Bijleveld. Check article Package maintenance details.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Tools for Processing WATLAS Tracking Data","text":"Many people organisations involved developing maintaining WATLAS. particularly thank Sivan Toledo Ran Nathan initial development ATLAS, Frank van Maarseveen Bas Denissen initial development Wadden Sea ATLAS (WATLAS). Additionally, thank Remko de Haan, Aris van der Vis, Yetzo de Hoo, NMF colleagues developments, assemblage support. Anne Dekinga crucial field deployment logistical solutions. thank colleagues COS help catching birds, especially Job ten Horn, Anne Dekinga, Luc de Monte. Also, thank partners stakeholders hosting equipment access sites. Lastly, thank crews RV Wim Wolff Wim-Jan Boon RV Adriaen Coenen help field, Marten Tacoma visualizing tracking data real time https://www.nioz.nl/watlas, many NIOZ staff volunteers facilitated work.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_add_raster_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Add raster data to tracking data — atl_add_raster_data","title":"Add raster data to tracking data — atl_add_raster_data","text":"function extracts raster data (example bathymetry data) specified coordinates adds column input data.table.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_add_raster_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add raster data to tracking data — atl_add_raster_data","text":"","code":"atl_add_raster_data(   data = NULL,   x = \"x\",   y = \"y\",   projection = sf::st_crs(32631),   raster_data,   var_name = NULL,   new_name = NULL,   change_unit = 1 )"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_add_raster_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add raster data to tracking data — atl_add_raster_data","text":"data data.table containing data raster values added. data.table, coerced one. x Character string specifying column name x-coordinates. Defaults \"x\". y Character string specifying column name y-coordinates. Defaults \"y\". projection coordinate reference system (CRS) spatial data input. Defaults EPSG:32631. raster_data SpatRaster object values extracted. var_name Character string specifying raster variable extract. Defaults first layer NULL. new_name Character string specifying name new column output. NULL, uses var_name. change_unit Numeric value multiply extracted raster values #'   adding data. Defaults 1.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_add_raster_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add raster data to tracking data — atl_add_raster_data","text":"data.table extracted raster data added new column.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_add_tidal_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Add tidal data to tracking data — atl_add_tidal_data","title":"Add tidal data to tracking data — atl_add_tidal_data","text":"Adds unique tide identifier, waterlevel, time high tide time low tide tracking data (minutes).","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_add_tidal_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add tidal data to tracking data — atl_add_tidal_data","text":"","code":"atl_add_tidal_data(   data,   tide_data,   tide_data_highres,   waterdata_resolution = \"10 min\",   waterdata_interpolation = NULL,   offset = 0 )"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_add_tidal_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add tidal data to tracking data — atl_add_tidal_data","text":"data dataframe tracking data timestamp column 'datetime' UTC. tide_data Data timing (UTC) low high tides. tide_data_highres Data timing (UTC) waterlevel small intervals (e.g. every 10 min) provided Rijkwaterstaat. waterdata_resolution resolution high resolution waterlevel data. used matching high resolution tidal data tracking data. Defaults 10 minutes can set differently. waterdata_interpolation Time interval water level data interpolated (smaller water data resolution e.g. 1 min). NULL keep original water data resolution. offset offset minutes location tidal gauge tracking area. value added timing water data.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_add_tidal_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add tidal data to tracking data — atl_add_tidal_data","text":"input data three columns added: tideID (unique number tidal period two consecutive high tides), tidaltime (time since high tide minutes), time2lowtide (time low tide minutes), waterlevel reference NAP (cm).","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_add_tidal_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add tidal data to tracking data — atl_add_tidal_data","text":"Pratik Gupte & Allert Bijleveld & Johannes Krietsch","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_alpha_along.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates different alpha values along a vector — atl_alpha_along","title":"Creates different alpha values along a vector — atl_alpha_along","text":"Copied https://github.com/mpio-/windR","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_alpha_along.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates different alpha values along a vector — atl_alpha_along","text":"","code":"atl_alpha_along(x, head = 20, skew = -2)"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_alpha_along.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates different alpha values along a vector — atl_alpha_along","text":"x Vector along alpha created head Numeric parameter influencing lenght head skew Numeric parameter influencing skew alpha","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_alpha_along.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates different alpha values along a vector — atl_alpha_along","text":"Numeric verctor different alpha values","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_alpha_along.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creates different alpha values along a vector — atl_alpha_along","text":"Mihai Valcu & Johannes Krietsch","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_alpha_along.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates different alpha values along a vector — atl_alpha_along","text":"","code":"library(ggplot2) d <- data.frame(   x = 1:100, y = 1:100,   a = atl_alpha_along(1:100, head = 20, skew = -2) ) bm <- ggplot(d, aes(x, y)) bm + geom_path(linewidth = 10)  bm + geom_path(linewidth = 10, alpha = d$a, lineend = \"round\")"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_as_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a data.frame or data.table to an simple feature (sf) object — atl_as_sf","title":"Convert a data.frame or data.table to an simple feature (sf) object — atl_as_sf","text":"function converts data.frame data.table simple feature (sf) object, allowing flexible specification x y coordinate columns. Additional attributes can also retained resulting sf object. four options = c(\"points\", \"lines\", \"table\", \"res_patches).","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_as_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame or data.table to an simple feature (sf) object — atl_as_sf","text":"","code":"atl_as_sf(   data,   tag = \"tag\",   x = \"x\",   y = \"y\",   projection = sf::st_crs(32631),   additional_cols = NULL,   option = \"points\",   buffer )"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_as_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a data.frame or data.table to an simple feature (sf) object — atl_as_sf","text":"data data.table object convertible data.table. input data containing coordinates optional attributes. tag character string representing  name column containing tag ID. x character string representing name column containing x-coordinates. Defaults \"x\". y character string representing name column containing y-coordinates. Defaults \"y\". projection object class crs representing coordinate reference system (CRS) assign resulting sf object. Defaults EPSG:32631 (WGS 84 / UTM zone 31N). additional_cols character vector specifying additional column names include resulting sf object. Defaults NULL (additional columns included). option character string \"points\" (default) returning sf points, \"lines\" return sf lines \"table\" return table sf coordinates column \"res_patches\" return sf polygons residency patches. latter, please specify buffer used around points, lim_spat_indep residency patch calculation larger. Otherwise patches multiple polygons. Points outside patches excluded choosing option \"res_patches\". buffer numeric value (meters) specifying buffer around polygon residency patch, lim_spat_indep residency patch calculation larger. Otherwise patches multiple polygons. lim_spat_indep residency patch calculation.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_as_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a data.frame or data.table to an simple feature (sf) object — atl_as_sf","text":"sf object containing specified coordinates geometry included attributes.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_as_sf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert a data.frame or data.table to an simple feature (sf) object — atl_as_sf","text":"Johannes Krietsch","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_as_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a data.frame or data.table to an simple feature (sf) object — atl_as_sf","text":"","code":"library(data.table)  # Example data data <- data.table(   tag = c(\"A\", \"A\", \"B\", \"B\"),   x = c(10, 20, 30, 40),   y = c(50, 60, 70, 80),   value = c(100, 200, 300, 400) )  # Convert to sf points with custom CRS and retain the \"value\" column sf_points <- atl_as_sf(data,   x = \"x\", y = \"y\", tag = \"tag\",   projection = sf::st_crs(4326),   additional_cols = \"value\" ) plot(sf_points)   # Convert to sf lines sf_lines <- atl_as_sf(data, x = \"x\", y = \"y\", tag = \"tag\", option = \"lines\") plot(sf_lines)   # Convert to a data.table with coordinates column sf_table <- atl_as_sf(data, x = \"x\", y = \"y\", tag = \"tag\", option = \"table\") print(sf_table) #>       tag      geometry #>    <char>   <sfc_POINT> #> 1:      A POINT (10 50) #> 2:      A POINT (20 60) #> 3:      B POINT (30 70) #> 4:      B POINT (40 80)"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_bbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a bounding box with specified aspect ratio and buffer — atl_bbox","title":"Create a bounding box with specified aspect ratio and buffer — atl_bbox","text":"function generates bounding box given geometry specified aspect ratio. Additionally, allows applying buffer expand contract bounding box.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_bbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a bounding box with specified aspect ratio and buffer — atl_bbox","text":"","code":"atl_bbox(data, x = \"x\", y = \"y\", asp = \"16:9\", buffer = 0)"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_bbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a bounding box with specified aspect ratio and buffer — atl_bbox","text":"data sf sfc object bounding box calculated data.table x- y- coordinates. x character string representing name column containing x-coordinates. Defaults \"x\". y character string representing name column containing y-coordinates. Defaults \"y\". asp character string specifying desired aspect ratio format \"width:height\". Default \"16:9\". buffer numeric value specifying buffer distance applied bounding box. Positive values expand bounding box, negative values shrink . Default 0.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_bbox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a bounding box with specified aspect ratio and buffer — atl_bbox","text":"bounding box (bbox), represented named vector xmin, ymin, xmax, ymax values.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_bbox.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a bounding box with specified aspect ratio and buffer — atl_bbox","text":"Johannes Krietsch","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_bbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a bounding box with specified aspect ratio and buffer — atl_bbox","text":"","code":"library(sf) #> Linking to GEOS 3.12.2, GDAL 3.9.3, PROJ 9.4.1; sf_use_s2() is TRUE  # Create a simple geometry geom <- st_as_sfc(\"POLYGON((0 0, 1 0, 1 2, 0 2, 0 0))\")  # Create a bounding box with a 16:9 aspect ratio atl_bbox(geom, asp = \"16:9\") #>      xmin      ymin      xmax      ymax  #> -1.277778  0.000000  2.277778  2.000000   # Create a bounding box with a 1:1 aspect ratio and a buffer of 0.5 units atl_bbox(geom, asp = \"1:1\", buffer = 0.5) #> xmin ymin xmax ymax  #> -1.0 -0.5  2.0  2.5"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_check_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Check data has required columns — atl_check_data","title":"Check data has required columns — atl_check_data","text":"internal function checks data.table required columns.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_check_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check data has required columns — atl_check_data","text":"","code":"atl_check_data(data, names_expected = c(\"x\", \"y\", \"time\"))"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_check_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check data has required columns — atl_check_data","text":"data tracking data check required columns. Must form data.frame similar, can handled function colnames. names_expected names expected character vector. default, checks column names x, y, time.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_check_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check data has required columns — atl_check_data","text":"None. Breaks data required columns.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_check_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check data has required columns — atl_check_data","text":"Pratik R. Gupte","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_check_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check data has required columns — atl_check_data","text":"","code":"# basic (and only) use if (FALSE) { # \\dontrun{ atl_check_data(   data = data,   names_expected = c(\"x\", \"y\", \"time\") ) } # }"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_check_res_patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the residency patches from one tag during one tide — atl_check_res_patch","title":"Check the residency patches from one tag during one tide — atl_check_res_patch","text":"Generates ggplot2 showing bird residency patches per tideID, including movement paths, patch durations, inset overview map.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_check_res_patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the residency patches from one tag during one tide — atl_check_res_patch","text":"","code":"atl_check_res_patch(   data,   tide_data,   tide,   offset = 0,   buffer_res_patches,   buffer_bm = 250,   buffer_overview = 10000,   point_size = 1,   point_alpha = 0.5,   path_linewidth = 0.5,   path_alpha = 0.2,   patch_label_size = 4,   patch_label_padding = 1,   element_text_size = 11,   water_fill = \"#D7E7FF\",   water_colour = \"grey80\",   land_fill = \"#faf5ef\",   land_colour = \"grey80\",   mudflat_colour = \"#faf5ef\",   mudflat_fill = \"#faf5ef\",   mudflat_alpha = 0.6,   filename = NULL,   png_width = 3840,   png_height = 2160 )"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_check_res_patch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the residency patches from one tag during one tide — atl_check_res_patch","text":"data data.table containing tracking data one tag. Must include columns: tag, x, y, time,datetime, species patch,  created atl_res_patch(). tide_data Data timing (UTC) low high tides. tide Tide ID subset. offset offset minutes location tidal gauge tracking area. value added timing water data. buffer_res_patches numeric value (meters) specifying buffer around polygon residency patch, lim_spat_indep residency patch calculation larger. Otherwise patches multiple polygons. buffer_bm Map buffer size (default: 250). buffer_overview Overview map buffer size (default: 10000). point_size Size plotted points (default: 1). point_alpha Transparency points (default: 0.5). path_linewidth Line width movement paths (default: 0.5). path_alpha Transparency movement paths (default: 0.2). patch_label_size Font size patch labels (default: 4). patch_label_padding Padding patch labels (default: 1). element_text_size Font size axis legend text (default: 11). water_fill Water fill (default \"#D7E7FF\") water_colour Water coulour (default \"grey80\") land_fill Land fill (default \"#faf5ef\") land_colour Land colour (default \"grey80\") mudflat_colour Mudflat colour (default \"#faf5ef\") mudflat_fill Mudflat fill (default \"#faf5ef\") mudflat_alpha Mudflat alpha (default 0.6) filename Character (NULL). provided, plot saved .png file path name; otherwise, function returns plot. png_width Width saved PNG (default: 3840). png_height Height saved PNG (default: 2160).","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_check_res_patch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the residency patches from one tag during one tide — atl_check_res_patch","text":"ggplot object saved PNG file.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_check_res_patch.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check the residency patches from one tag during one tide — atl_check_res_patch","text":"Johannes Krietsch","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_check_tag.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the data from one tag on a map — atl_check_tag","title":"Check the data from one tag on a map — atl_check_tag","text":"function processes tracking data specific tag generates visualization using ggplot2. allows customization colors, point sizes, track styles, supports various display options datetime, nbs (number base stations / receivers), standard deviation, speed_in gap. function can either return plot save png file.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_check_tag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the data from one tag on a map — atl_check_tag","text":"","code":"atl_check_tag(   data,   buffer = 1000,   asp = \"16:9\",   option = \"datetime\",   scale_option = \"A\",   scale_direction = -1,   scale_trans = \"identity\",   scale_max = NULL,   first_n = NULL,   last_n = NULL,   highlight_first = FALSE,   highlight_last = FALSE,   highlight_outliers = FALSE,   point_size = 0.5,   point_alpha = 1,   path_linewidth = 0.5,   path_alpha = 0.1,   element_text_size = 11,   water_fill = \"#D7E7FF\",   water_colour = \"grey80\",   land_fill = \"#faf5ef\",   land_colour = \"grey80\",   mudflat_colour = \"#faf5ef\",   mudflat_fill = \"#faf5ef\",   mudflat_alpha = 0.6,   filename = NULL,   png_width = 3840,   png_height = 2160 )"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_check_tag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the data from one tag on a map — atl_check_tag","text":"data data.table containing tracking data. Must include columns: \"tag\", \"x\", \"y\", \"time\", \"datetime\". buffer Numeric. buffer size meters around data points plot (default: 1000). asp aspect ratio plot (default: \"16:9\"). option Determines color mapping variable. Options : \"datetime\": Datetime along track \"nbs\": Number receiver (base) stations contributed localization \"var\": Error maximal variance varx vary \"speed_in\": Speed m/s \"gap\": Gaps coloured time point size scale_option Character. color scheme option viridis (default: \"\"). See https://search.r-project.org/CRAN/refmans/viridisLite/html/viridis.html options (-H). scale_direction Numeric. Direction color scale (-1 reverses, default: -1). scale_trans Transformation scale. Default \"identity\", (transformation), e.g. \"log\", \"log10\" \"sqrt\". See scale_*_trans() options. scale_max set, determines max value scale options: nbs (numeric), var (numberic), speed_in (numeric m/s), gap (numeric seconds). Everything max value get max color. first_n Numeric (NULL). provided, first n locations shown. last_n Numeric (NULL). provided, last n locations shown. highlight_first Logical. TRUE, highlights first point track (default: FALSE). highlight_last Logical. TRUE, highlights last point track (default: FALSE). highlight_outliers Logical. TRUE, highlights points flagged outliers (needs preassigned column outlier TRUE FALSE) track (default: FALSE). point_size size data points (default: 0.5). point_alpha Numeric. Transparency data points (default: 1). path_linewidth Numeric. width connecting track lines (default: 0.5). path_alpha Transparency track lines (default: 0.1). element_text_size Adjust size text. water_fill Water fill (default \"#D7E7FF\") water_colour Water coulour (default \"grey80\") land_fill Land fill (default \"#faf5ef\") land_colour Land colour (default \"grey80\") mudflat_colour Mudflat colour (default \"#faf5ef\") mudflat_fill Mudflat fill (default \"#faf5ef\") mudflat_alpha Mudflat alpha (default 0.6) filename Character (NULL). provided, plot saved .png file path name; otherwise, function returns plot. png_width Width saved PNG (default: 3840). png_height Height saved PNG (default: 2160).","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_check_tag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the data from one tag on a map — atl_check_tag","text":"ggplot2 object specified option adjustments. filename provided, plot saved .png file instead returned.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_check_tag.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check the data from one tag on a map — atl_check_tag","text":"Johannes Krietsch","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_check_tag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the data from one tag on a map — atl_check_tag","text":"","code":"# packages library(tools4watlas)  # path to csv with filtered data data_path <- system.file(   \"extdata\", \"watlas_data_filtered.csv\",   package = \"tools4watlas\" )  # load data data <- fread(data_path, yaml = TRUE)  # subset bar-tailed godwit data <- data[species == \"bar-tailed godwit\"]  # plot different options atl_check_tag(   data,   option = \"datetime\",   highlight_first = TRUE, highlight_last = TRUE )  atl_check_tag(data, option = \"nbs\")  atl_check_tag(data, option = \"var\")  atl_check_tag(data, option = \"speed_in\")  atl_check_tag(data, option = \"gap\")"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_create_bm.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a basemap with customised bounding box — atl_create_bm","title":"Create a basemap with customised bounding box — atl_create_bm","text":"function creates basemap using spatial data layers, allowing custom bounding boxes, aspect ratios, scale bar adjustments.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_create_bm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a basemap with customised bounding box — atl_create_bm","text":"","code":"atl_create_bm(   data = NULL,   x = \"x\",   y = \"y\",   buffer = 100,   asp = \"16:9\",   option = \"osm\",   land_data = tools4watlas::land,   mudflats_data = tools4watlas::mudflats,   lakes_data = tools4watlas::lakes,   raster_data,   shade = FALSE,   scalebar = TRUE,   sc_location = \"br\",   sc_cex = 1,   sc_height = 0.3,   sc_pad_x = 0.4,   sc_pad_y = 0.6,   projection = sf::st_crs(32631),   water_fill = \"#D7E7FF\",   water_colour = \"grey80\",   land_fill = \"#faf5ef\",   land_colour = \"grey80\",   mudflat_colour = \"#faf5ef\",   mudflat_fill = \"#faf5ef\",   mudflat_alpha = 0.6 )"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_create_bm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a basemap with customised bounding box — atl_create_bm","text":"data data.table object convertible data.table containing spatial points. Defaults single point around Griend NULL. x character string specifying column x-coordinates. Defaults \"x\". y character string specifying column y-coordinates. Defaults \"y\". buffer numeric value (meters) specifying buffer distance bounding box. Default 1000. asp character string specifying aspect ratio \"width:height\" format. Default \"16:9\". option Either \"osm\" OpenStreetMap polygons \"bathymetry\" bathymetry data. Note later necessary provide bathymetry data UTM31. land_data sf object land polygons. Defaults land. mudflats_data sf object mudflat polygons. Defaults mudflats. lakes_data sf object lake polygons. Defaults lakes. raster_data SpatRaster (tif opened terra::rast() bathymetry data. shade TRUE shade added bathymetry data. (can take large maps) scalebar TRUE FALSE adding scalebar plot. sc_location character string specifying location scale bar. Default \"br\" (bottom right). sc_cex Numeric value scale bar text size. Default 0.7. sc_height unit object specifying height scale bar. Default unit(0.25, \"cm\"). sc_pad_x unit object specifying horizontal padding scale bar. Default unit(0.25, \"cm\"). sc_pad_y unit object specifying vertical padding scale bar. Default unit(0.5, \"cm\"). projection coordinate reference system (CRS) spatial data. Defaults EPSG:32631 (WGS 84 / UTM zone 31N). Output always UTM 31N water_fill Water fill (default \"#D7E7FF\") water_colour Water coulour (default \"grey80\") land_fill Land fill (default \"#faf5ef\") land_colour Land colour (default \"grey80\") mudflat_colour Mudflat colour (default \"#faf5ef\") mudflat_fill Mudflat fill (default \"#faf5ef\") mudflat_alpha Mudflat alpha (default 0.6)","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_create_bm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a basemap with customised bounding box — atl_create_bm","text":"ggplot2 object representing base map specified settings.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_create_bm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a basemap with customised bounding box — atl_create_bm","text":"Johannes Krietsch","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_create_bm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a basemap with customised bounding box — atl_create_bm","text":"","code":"# Example with default settings (map around Griend) bm <- atl_create_bm(buffer = 5000) print(bm)"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_ffmpeg_pattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate ffmpeg filename pattern — atl_ffmpeg_pattern","title":"Generate ffmpeg filename pattern — atl_ffmpeg_pattern","text":"function generates filename pattern FFmpeg based number digits numeric part input file path (without .png extension).","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_ffmpeg_pattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate ffmpeg filename pattern — atl_ffmpeg_pattern","text":"","code":"atl_ffmpeg_pattern(x)"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_ffmpeg_pattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate ffmpeg filename pattern — atl_ffmpeg_pattern","text":"x character vector file paths, path include filename .png extension.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_ffmpeg_pattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate ffmpeg filename pattern — atl_ffmpeg_pattern","text":"character string representing FFmpeg-compatible filename pattern (e.g., \"%03d.png\" filenames like \"001.png\").","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_ffmpeg_pattern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate ffmpeg filename pattern — atl_ffmpeg_pattern","text":"","code":"atl_ffmpeg_pattern(\"path/to/file/001.png\") #> [1] \"%03d.png\" # Returns: \"%03d.png\""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_file_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the file path for WATLAS or GIS data based on the user's name. — atl_file_path","title":"Get the file path for WATLAS or GIS data based on the user's name. — atl_file_path","text":"function returns predefined file path based user's system username selected data type. Users must predefined function.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_file_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the file path for WATLAS or GIS data based on the user's name. — atl_file_path","text":"","code":"atl_file_path(   data_type = c(\"watlas_teams\", \"rasters\", \"shapefiles\", \"sqlite_db\") )"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_file_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the file path for WATLAS or GIS data based on the user's name. — atl_file_path","text":"data_type character string indicating type data. Options : \"watlas_teams\": Path “WATLAS” SharePoint folder: Documents/data/ \"rasters\": Path “Birds, fish ’n chips” SharePoint folder: Documents/data/GIS/rasters/ \"shapefiles\": Path “Birds, fish ’n chips” SharePoint folder: Documents/data/GIS/shapefiles/ \"sqlite_db\": Path ZEUS folder: ZEUS/cos/birds/bijleveld/fieldwork/WATLAS/localizations","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_file_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the file path for WATLAS or GIS data based on the user's name. — atl_file_path","text":"character string representing full file path selected data type current user.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_file_path.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the file path for WATLAS or GIS data based on the user's name. — atl_file_path","text":"local users access NIOZ network, recommend add shortcut OneDrive “WATLAS” SharePoint folder: Documents/data/. path function refers copy OneDrive. Files folder (e.g. tags_watlas_all.xlsx tide data) often updated changes automatically updated computer. second source data “Birds, fish ’n chips” SharePoint folder: Documents/data/GIS/ subfolders rasters shapefiles. One can also create OneDrive shortcut folder, however contains many large files files usually change. therefore recommend copy necessary data local folder computer link path folder. build articles package website, need specify user paths .","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_filter_bounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter positions by an area — atl_filter_bounds","title":"Filter positions by an area — atl_filter_bounds","text":"Filters positions lying inside outside area. area can defined two ways, either X Y coordinate ranges, sf-*POLYGON object. MULTIPOLYGON objects supported internal function atl_within_polygon.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_filter_bounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter positions by an area — atl_filter_bounds","text":"","code":"atl_filter_bounds(   data,   x = \"x\",   y = \"y\",   x_range = NA,   y_range = NA,   sf_polygon = NULL,   remove_inside = TRUE )"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_filter_bounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter positions by an area — atl_filter_bounds","text":"data dataframe extension contains X Y coordinates. x X coordinate column. y Y coordinate column. x_range range X coordinates. y_range range Y coordinates. sf_polygon sfc_*POLYGON object must defined CRS. polygon CRS assumed appropriate positions well, assigned coordinates determining intersection. remove_inside Whether remove points within range. Setting negate = TRUE removes positions within bounding box specified X Y ranges.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_filter_bounds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter positions by an area — atl_filter_bounds","text":"data frame tracking locations attractor points removed.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_filter_bounds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Filter positions by an area — atl_filter_bounds","text":"Pratik R. Gupte","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_filter_bounds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter positions by an area — atl_filter_bounds","text":"","code":"if (FALSE) { # \\dontrun{ filtered_data <- atl_filter_bounds(   data = data,   x = \"X\", y = \"Y\",   x_range = c(x_min, x_max),   y_range = c(y_min, y_max),   sf_polygon = your_polygon,   remove_inside = FALSE ) } # }"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_filter_covariates.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter data by position covariates — atl_filter_covariates","title":"Filter data by position covariates — atl_filter_covariates","text":"atlastools function atl_filter_covariates allows convenient filtering dataset number logical filters. function can used easily filter timestamps range, well combine simple spatial temporal filters. accepts character vector R expressions return logical vector (.e., TRUE FALSE). filtering condition interpreted context dataset supplied, used filter rows satisfy filter conditions. Users must make sure filtering variables exist dataset order avoid errors.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_filter_covariates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter data by position covariates — atl_filter_covariates","text":"","code":"atl_filter_covariates(data, filters = c(), quietly = FALSE)"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_filter_covariates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter data by position covariates — atl_filter_covariates","text":"data dataframe similar containing variables filtered. filters character vector filter expressions. example might \"speed < 20\". filtering variables must dataframe. function explicitly check whether filtering variables present; makes flexible, allowing expressions \"(speed, 2, 20)\", also something use risk. missing filter variables result empty data frame. quietly TRUE returns percentage number positions filtered, FALSE functions runs quietly","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_filter_covariates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter data by position covariates — atl_filter_covariates","text":"dataframe filtered using filters specified.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_filter_covariates.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Filter data by position covariates — atl_filter_covariates","text":"Pratik R. Gupte","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_filter_covariates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter data by position covariates — atl_filter_covariates","text":"","code":"if (FALSE) { # \\dontrun{ night_data <- atl_filter_covariates(   data = dataset,   filters = c(\"!inrange(hour, 6, 18)\") )  data_in_area <- atl_filter_covariates(   data = dataset,   filters = c(     \"between(time, t_min, t_max)\",     \"between(x, x_min, x_max)\"   ) ) filtered_data <- atl_filter_covariates(   data = data,   filters = c(     \"NBS > 3\",     \"SD < 100\",     \"between(day, 5, 8)\"   ) ) } # }"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_format_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Format time in easy readable interval — atl_format_time","title":"Format time in easy readable interval — atl_format_time","text":"function converts given time (seconds) easy readable format days, hours, minutes, seconds.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_format_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format time in easy readable interval — atl_format_time","text":"","code":"atl_format_time(time)"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_format_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format time in easy readable interval — atl_format_time","text":"time Time seconds (numeric vector numeric values).","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_format_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format time in easy readable interval — atl_format_time","text":"character vector formatted time intervals.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_format_time.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Format time in easy readable interval — atl_format_time","text":"Johannes Krietsch","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_format_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format time in easy readable interval — atl_format_time","text":"","code":"library(tools4watlas) atl_format_time(3600) #> [1] \"1 hours\" atl_format_time(c(120, 3600, 86400)) #> [1] \"2 min\"   \"1 hours\" \"1 days\""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_full_tag_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Create full tag ID or tag ID with specific length — atl_full_tag_id","title":"Create full tag ID or tag ID with specific length — atl_full_tag_id","text":"Create full tag ID tag ID specific length","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_full_tag_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create full tag ID or tag ID with specific length — atl_full_tag_id","text":"","code":"atl_full_tag_id(tag, short = FALSE, n = 4)"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_full_tag_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create full tag ID or tag ID with specific length — atl_full_tag_id","text":"tag Tag number vector multiple numbers (either numeric character). Maximally provide 6 digits, less work. short TRUE FALSE short long tag ID n short = TRUE, many digits short tag ID ?","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_full_tag_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create full tag ID or tag ID with specific length — atl_full_tag_id","text":"Full short tag ID character","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_full_tag_id.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create full tag ID or tag ID with specific length — atl_full_tag_id","text":"Johannes Krietsch","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_full_tag_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create full tag ID or tag ID with specific length — atl_full_tag_id","text":"","code":"tag <- c(3040, 3085, 3086) atl_full_tag_id(tag) #> [1] \"31001003040\" \"31001003085\" \"31001003086\" atl_full_tag_id(tag, short = TRUE) #> [1] \"3040\" \"3085\" \"3086\""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data from a SQLite-database — atl_get_data","title":"Get data from a SQLite-database — atl_get_data","text":"function can used obtain data local remote SQLite database. full path filename provided 'SQLiteDB', look SQLite-file locally. 'SQLiteDB' NULL establish connection remote server. also functionality use existing opened data base connection can provided 'use_connection'. instance, creating residence patches within loop tags tide ID's. establishing conncection within -loop takes long time, established connection can used.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data from a SQLite-database — atl_get_data","text":"","code":"atl_get_data(   tag,   tracking_time_start,   tracking_time_end,   timezone = \"CET\",   database = \"some_database\",   host = \"some.host.nl\",   username = \"someuser\",   password = \"somepassword\",   SQLiteDB = NULL,   use_connection = NULL )"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data from a SQLite-database — atl_get_data","text":"tag number representing WATLAS tag (either short format e.g. 4 digits long format 11 digits). May passed character numeric, converted character. example \"31001000001\". tracking_time_start Character representation time start-point data retrieved. tracking_time_end Character time representing end point corresponding start point. timezone Timezone tracking_time_start tracking_time_end. Must valid timezone .POSIXct function. database database name host server. host server address data stored. username Username access server. password Password access server. SQLiteDB full path including filename local SQLite-database whith tracking data. argument overrules establishing connection remote host. use_connection R-object previously established connection, instance generated RMySQL::dbConnect(RMySQL::MySQL(),  user = 'username', password = 'password', dbname = 'database',  host = 'host'). argument overrules making connection local host SQLiteDB remote host.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data from a SQLite-database — atl_get_data","text":"data.table localizations specified tag, filtered start end times. posID\t  =\tUnique number localizations  tag\t\t  =\t4 digit tag number (character)  time\t\t  =\tUNIX time (seconds)  datetime = Timestamp POSIXct (UTC)  x\t\t    =\tx-ccordinates meters (UTM 31 N)  y\t\t    =\ty-ccordinates meters (UTM 31 N)  nbs\t\t  =\tNumber Base Stations used calculating coordinates  varx\t\t  =\tVariance estimating x-coordinates  vary\t\t  =\tVariance estimating y-coordinates  covxy\t  =\tCo-variance y- y-coordinates","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_get_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get data from a SQLite-database — atl_get_data","text":"Pratik R. Gupte & Allert . Bijleveld & Johannes Krietsch","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_get_speed.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate instantaneous speed — atl_get_speed","title":"Calculate instantaneous speed — atl_get_speed","text":"Returns additional columns incoming outcoming speed data.table. Speed metres per time interval. time interval dependent units column specified TIME.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_get_speed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate instantaneous speed — atl_get_speed","text":"","code":"atl_get_speed(   data,   tag = \"tag\",   x = \"x\",   y = \"y\",   time = \"time\",   type = c(\"in\", \"out\") )"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_get_speed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate instantaneous speed — atl_get_speed","text":"data dataframe similar must columns specified x, y, time. tag tag ID. x x coordinate. y y coordinate. time timestamp seconds since UNIX epoch. type type speed (incoming outgoing) return. Incoming speeds specified type = \"\", outgoing speeds type = \"\" c(\"\", \"\").","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_get_speed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate instantaneous speed — atl_get_speed","text":"Data.table changed place additional speed columns","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_get_speed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate instantaneous speed — atl_get_speed","text":"Pratik R. Gupte & Allert Bijleveld & Johannes Krietsch","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_get_speed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate instantaneous speed — atl_get_speed","text":"","code":"library(tools4watlas) library(data.table)  # Create example data with two tags set.seed(123) data <- data.table(   tag = rep(c(\"1000\", \"2000\"), each = 5),   x = c(1, 3, 6, 10, 15, 2, 4, 7, 11, 16),   y = c(2, 5, 9, 14, 20, 3, 6, 10, 15, 21) )  # Add a Unix timestamp column (randomized within a date range) start_time <- as.numeric(as.POSIXct(\"2024-01-01 00:00:00\", tz = \"UTC\")) data[, time := start_time + sample(0:10000, .N, replace = TRUE)] #>        tag     x     y       time #>     <char> <num> <num>      <num> #>  1:   1000     1     2 1704069662 #>  2:   1000     3     5 1704069710 #>  3:   1000     6     9 1704075917 #>  4:   1000    10    14 1704070185 #>  5:   1000    15    20 1704069041 #>  6:   2000     2     3 1704076533 #>  7:   2000     4     6 1704070570 #>  8:   2000     7    10 1704071960 #>  9:   2000    11    15 1704073945 #> 10:   2000    16    21 1704077018   data <- atl_get_speed(data,   tag = \"tag\",   x = \"x\",   y = \"y\",   time = \"time\",   type = c(\"in\", \"out\") )"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_median_smooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a median smooth to coordinates — atl_median_smooth","title":"Apply a median smooth to coordinates — atl_median_smooth","text":"Applies median smooth defined rolling window x y coordinates data, tag ID","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_median_smooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a median smooth to coordinates — atl_median_smooth","text":"","code":"atl_median_smooth(   data,   tag = \"tag\",   x = \"x\",   y = \"y\",   time = \"time\",   moving_window = 5 )"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_median_smooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a median smooth to coordinates — atl_median_smooth","text":"data data.frame data.table object returned atl_get_data, contain original columns (particularly tag, x, y, time). tag tag ID. x X coordinate. y Y coordinate. time timestamp, ideally integer. moving_window size moving window median smooth. Must odd number.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_median_smooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a median smooth to coordinates — atl_median_smooth","text":"data.table class object (extends data.frame), including X,Y smoothed coordinates x_raw y_raw, raw coordinates.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_median_smooth.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Apply a median smooth to coordinates — atl_median_smooth","text":"Pratik Gupte & Allert Bijleveld & Johannes Krietsch","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_median_smooth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a median smooth to coordinates — atl_median_smooth","text":"","code":"library(tools4watlas) library(data.table) library(ggplot2)  # Example dataset # tag 1 data1 <- data.table(   tag = rep(1, 10),   x = c(1, 2, 5, 6, 8, 10, 12, 14, 17, 21),   y = c(1, 7, 8, 12, 13, 20, 16, 18, 20, 21),   time = 1:10 )  # tag 2 data2 <- data.table(   tag = rep(2, 10),   x = c(2, 3, 6, 7, 9, 11, 13, 15, 18, 26),   y = c(2, 6, 7, 11, 12, 19, 15, 17, 19, 20),   time = 1:10 )  # Combine both datasets data <- rbind(data1, data2) setorder(data, tag, time)  # Run the function smoothed_data <- atl_median_smooth(data, moving_window = 5)  ggplot() +   geom_path(     data = smoothed_data, aes(x_raw, y_raw),     color = \"firebrick3\", linewidth = 0.5   ) +   geom_path(     data = smoothed_data, aes(x, y),     color = \"black\", linewidth = 0.5   ) +   geom_point(     data = smoothed_data, aes(x_raw, y_raw),     color = \"firebrick3\", size = 1.2   ) +   geom_point(     data = smoothed_data, aes(x, y),     color = \"black\", size = 1   ) +   theme_bw() +   facet_wrap(~tag)"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_patch_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the distance between patches — atl_patch_dist","title":"Get the distance between patches — atl_patch_dist","text":"Gets linear distance first point patch last point previous patch patch - 1. Distance returned metres. function used internally functions, rarely .","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_patch_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the distance between patches — atl_patch_dist","text":"","code":"atl_patch_dist(   data,   x1 = \"x_end\",   x2 = \"x_start\",   y1 = \"y_end\",   y2 = \"y_start\" )"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_patch_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the distance between patches — atl_patch_dist","text":"data dataframe extending class data.frame, data.table. must contain two pairs coordinates, start end X Y coordinates feature. x1 first X coordinate longitude; inter-patch distances, last coordinate (x_end) patch \\(\\). x2 second X coordinate; inter-patch distances, first coordinate (x_start) subsequent patch \\(+ 1\\). y1 first Y coordinate latitude; inter-patch distances, last coordinate (y_end) patch \\(\\). y2 second Y coordinate; inter-patch distances, first coordinate (y_start) subsequent patch \\(+ 1\\).","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_patch_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the distance between patches — atl_patch_dist","text":"numeric vector length number patches, rows input dataframe. single patches, returns NA. vector elements NA, followed n-1 distances, n number rows.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_patch_dist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the distance between patches — atl_patch_dist","text":"Pratik R. Gupte","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_patch_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the distance between patches — atl_patch_dist","text":"","code":"# basic usage of atl_patch_dist if (FALSE) { # \\dontrun{ atl_patch_dist(   data = data,   x1 = \"x_end\", x2 = \"x_start\",   y1 = \"y_end\", y2 = \"y_start\" ) } # }"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_patch_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Get residence patch data — atl_patch_summary","title":"Get residence patch data — atl_patch_summary","text":"function atl_patch_summary can used extract patch-specific summary data median coordinates, patch duration, distance travelled within patch, displacement within patch, patch area.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_patch_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get residence patch data — atl_patch_summary","text":"","code":"atl_patch_summary(patch_data, which_data = \"summary\", buffer_radius = 10)"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_patch_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get residence patch data — atl_patch_summary","text":"patch_data data.frame nested list column raw data underlying patch. Since data.frames support nested columns, actually data.table similar extension. which_data data return. May raw data underlying patch (which_data = \"points\"), spatial features (sf-MULTIPOLYGON) object patch covariates (which_data = \"spatial\"), data.table patch covariates without geometry column (which_data = \"summary\"). buffer_radius Spatial buffer radius (metres) around points requesting sf based polygons.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_patch_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get residence patch data — atl_patch_summary","text":"object type sf data.table depending data requested.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_patch_summary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get residence patch data — atl_patch_summary","text":"Pratik R. Gupte","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_patch_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get residence patch data — atl_patch_summary","text":"","code":"if (FALSE) { # \\dontrun{ patch_summary <- atl_patch_summary(   patch_data = patches,   which_data = \"summary\",   buffer_radius = 10 ) } # }"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_plot_add_track.html","id":null,"dir":"Reference","previous_headings":"","what":"Add tracks to plot from list — atl_plot_add_track","title":"Add tracks to plot from list — atl_plot_add_track","text":"function used plotting multiple individuals map list spatial data.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_plot_add_track.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add tracks to plot from list — atl_plot_add_track","text":"","code":"atl_plot_add_track(   data,   Pch = 19,   Cex = 0.25,   Lwd = 1,   col,   Type = \"o\",   endpoint = FALSE )"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_plot_add_track.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add tracks to plot from list — atl_plot_add_track","text":"data spatial data frame. Pch type point plot localization Cex size point plot localization Lwd width line connect localizations col colour plotted localizations Type type graph make. instance, \"b\" points lines \"o\" simlar places points top line (gaps) endpoint Whether plot last localization individual magenta","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_plot_add_track.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add tracks to plot from list — atl_plot_add_track","text":"Allert Bijleveld","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_plot_map_osm.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a map downloaded with OpenStreetMap — atl_plot_map_osm","title":"Plot a map downloaded with OpenStreetMap — atl_plot_map_osm","text":"function used e.g. plotting multiple individuals.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_plot_map_osm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a map downloaded with OpenStreetMap — atl_plot_map_osm","text":"","code":"atl_plot_map_osm(map, ppi = 96)"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_plot_map_osm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a map downloaded with OpenStreetMap — atl_plot_map_osm","text":"map map loaded OpenStreetMap::openmap(). ppi pixels per inch, used calculate dimensions plotting region mapID. Deafults 96.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_plot_map_osm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a map downloaded with OpenStreetMap — atl_plot_map_osm","text":"Returns OSM background plot adding tracks.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_plot_map_osm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot a map downloaded with OpenStreetMap — atl_plot_map_osm","text":"Allert Bijleveld","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_plot_rpatches.html","id":null,"dir":"Reference","previous_headings":"","what":"Add residence patches to a plot — atl_plot_rpatches","title":"Add residence patches to a plot — atl_plot_rpatches","text":"Adds residence pattch data UTM 31N points polygons plot.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_plot_rpatches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add residence patches to a plot — atl_plot_rpatches","text":"","code":"atl_plot_rpatches(   data,   Pch = 21,   Cex = 0.25,   Lwd = 1,   Col = 1,   Bg = NULL,   Lines = TRUE )"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_plot_rpatches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add residence patches to a plot — atl_plot_rpatches","text":"data Either sfc_Polygon dataframe tracking data Pch Corresponding graphical argument passed base plot function Cex Corresponding graphical argument passed base plot function Lwd Corresponding graphical argument passed base plot function Col Corresponding graphical argument passed base plot function Bg Corresponding graphical argument passed base plot function Lines Corresponding graphical argument passed base plot function","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_plot_rpatches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add residence patches to a plot — atl_plot_rpatches","text":"Nothing addition current plotting device.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_plot_rpatches.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add residence patches to a plot — atl_plot_rpatches","text":"Allert Bijleveld","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_plot_tag.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot track for one individual on a simple background — atl_plot_tag","title":"Plot track for one individual on a simple background — atl_plot_tag","text":"function plots localization data one individual.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_plot_tag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot track for one individual on a simple background — atl_plot_tag","text":"","code":"atl_plot_tag(   data,   tag = NULL,   fullname = NULL,   color_by = \"time\",   towers = NULL,   h = 7,   w = 7 * (16/9),   buffer = 1,   legend = \"topleft\",   scalebar = 5,   cex_legend = 1,   land_data = tools4watlas::land,   mudflats_data = tools4watlas::mudflats,   lakes_data = tools4watlas::lakes )"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_plot_tag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot track for one individual on a simple background — atl_plot_tag","text":"data dataframe tracking data. Can include multiple tags, one tag selected plotting. tag four-digit tag number character plot. Defaults plotting first tag data. fullname specified plot saved path name (include extension). Defaults NULL plotting graphics window. color_by Either \"time\", \"sd\", \"nbs\", respectively used colour localization relative time (hours), variance localizations maximum VARX VARY, Number Base Stations (NBS) used calculate localization. Defaults \"time\". towers dataframe coordinates receiver stations (named X Y). h height plot (saving) w width plot (saving) buffer Buffer around bounding box meters legend Passed legend function sets location legend plot. scalebar Length scalebar km. cex_legend size text legend. land_data sf object land polygons. Defaults land. mudflats_data sf object mudflat polygons. Defaults mudflats. lakes_data sf object lake polygons. Defaults lakes.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_plot_tag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot track for one individual on a simple background — atl_plot_tag","text":"Returns nothing plot.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_plot_tag.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot track for one individual on a simple background — atl_plot_tag","text":"Allert Bijleveld & Johannes Krietsch","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_plot_tag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot track for one individual on a simple background — atl_plot_tag","text":"","code":"library(tools4watlas)  # Load example data data <- data_example  # Transform to sf d_sf <- atl_as_sf(data, additional_cols = names(data))  # Plot the tracking data with a simple background atl_plot_tag(   data = d_sf, tag = NULL, fullname = NULL, buffer = 1,   color_by = \"time\" ) #> [1] \"Ensure that data has the UTM 31N coordinate reference system.\"   atl_plot_tag(   data = d_sf, tag = NULL, fullname = NULL, buffer = 1,   color_by = \"sd\" ) #> [1] \"Ensure that data has the UTM 31N coordinate reference system.\"   atl_plot_tag(   data = data, tag = NULL, fullname = NULL, buffer = 1,   color_by = \"time\" ) #> [1] \"Ensure that data has the UTM 31N coordinate reference system.\""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_plot_tag_osm.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot track for one individual on a OpenStreetMap satellite map — atl_plot_tag_osm","title":"Plot track for one individual on a OpenStreetMap satellite map — atl_plot_tag_osm","text":"function plots localization data one individual.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_plot_tag_osm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot track for one individual on a OpenStreetMap satellite map — atl_plot_tag_osm","text":"","code":"atl_plot_tag_osm(   data,   tag = NULL,   mapID,   color_by = \"time\",   fullname = NULL,   ppi = 96,   towers = NULL,   legend = \"topleft\",   scalebar = 5,   cex_legend = 1 )"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_plot_tag_osm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot track for one individual on a OpenStreetMap satellite map — atl_plot_tag_osm","text":"data dataframe tracking data. Can include multiple tags, one tag selected plotting. tag four-digit tag number character plot. Defaults plotting first tag data. mapID map-object generated function OpenStreetMap::openmap(). color_by Either \"time\", \"SD\", \"NBS\", respectively used colour localization relative time (hours), variance localizations maximum VARX VARY, Number Base Stations (NBS) used calculate localization. Defaults \"time\". fullname specified plot saved path name (include extension). Defaults NULL plotting graphics window. ppi pixels per inch, used calculate dimensions plotting region mapID. Deafults 96. towers dataframe coordinates receiver stations (named X Y). legend Passed legend function sets location legend plot. scalebar Length scalebar km. cex_legend size text legend.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_plot_tag_osm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot track for one individual on a OpenStreetMap satellite map — atl_plot_tag_osm","text":"Returns nothing plot.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_plot_tag_osm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot track for one individual on a OpenStreetMap satellite map — atl_plot_tag_osm","text":"Allert Bijleveld","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_plot_tag_osm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot track for one individual on a OpenStreetMap satellite map — atl_plot_tag_osm","text":"","code":"library(tools4watlas) library(OpenStreetMap) library(sf)  # Load example data data <- data_example[tag == data_example[1, tag]]  # make data spatial and transform projection to WGS 84 (used in osm) d_sf <- atl_as_sf(data, additional_cols = names(data)) d_sf <- st_transform(d_sf, crs = st_crs(4326))  # get bounding box bbox <- atl_bbox(d_sf, buffer = 500)  # extract openstreetmap # other 'type' options are \"osm\", \"maptoolkit-topo\", \"bing\", \"stamen-toner\", # \"stamen-watercolor\", \"esri\", \"esri-topo\", \"nps\", \"apple-iphoto\", \"skobbler\"; #> [1] \"skobbler\" map <- openmap(c(bbox[\"ymax\"], bbox[\"xmin\"]),   c(bbox[\"ymin\"], bbox[\"xmax\"]),   type = \"osm\", mergeTiles = TRUE )  # Plot the tracking data on the satellite image atl_plot_tag_osm(   data = d_sf, tag = NULL, mapID = map,   color_by = \"time\", fullname = NULL, scalebar = 3 )"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_progress_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"Display a live progress bar for PNG file generation in a directory — atl_progress_bar","title":"Display a live progress bar for PNG file generation in a directory — atl_progress_bar","text":"function meant track progress PNG's created parallel loop. check number PNG files specified directory make progress bar console. use function, open new R session run function .","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_progress_bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display a live progress bar for PNG file generation in a directory — atl_progress_bar","text":"","code":"atl_progress_bar(file_path, total = NULL, refresh_rate = 1)"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_progress_bar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display a live progress bar for PNG file generation in a directory — atl_progress_bar","text":"file_path Path directory containing PNG files. total Optional. Total number expected PNG files. NULL, function reads 'total_frames.txt' created atl_time_steps() directory. refresh_rate Numeric value seconds specifying often progress bar updates.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_progress_bar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display a live progress bar for PNG file generation in a directory — atl_progress_bar","text":"return value. Prints progress bar console.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_res_patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct residence patches from position data — atl_res_patch","title":"Construct residence patches from position data — atl_res_patch","text":"cleaned movement track one individual time can classified residence patches using function atl_res_patch. function expects specific organisation data: least following columns, x, y, time, corresponding coordinates, time POSIXct. atl_res_patch requires three parameters: (1) maximum speed threshold localizations (called max_speed), (2) distance threshold clusters positions (called lim_spat_indep), (3) time interval clusters (called lim_time_indep).Clusters formed fewer minimum number positions can excluded.exclusion clusters positions can help removing bias due short stops, short stops also interest, can included reducing min_fixes argument.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_res_patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct residence patches from position data — atl_res_patch","text":"","code":"atl_res_patch(   data,   max_speed = 3,   lim_spat_indep = 75,   lim_time_indep = 180,   min_fixes = 3,   min_duration = 120 )"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_res_patch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct residence patches from position data — atl_res_patch","text":"data dataframe class extends data.frame one individual . dataframe must contain least two spatial coordinates, x y, temporal coordinate, time. max_speed numeric value specifying maximum speed (m/s) two coordinates considered non-transitory lim_spat_indep numeric value distance metres spatial distance two patches considered independent. lim_time_indep numeric value time minutes time difference two patches considered independent. min_fixes minimum number fixes group spatially-proximate number points considered preliminary residence patch. min_duration minimum duration (seconds) classifying residence patches.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_res_patch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct residence patches from position data — atl_res_patch","text":"data.table added column patch indicating patch.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_res_patch.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Construct residence patches from position data — atl_res_patch","text":"Pratik R. Gupte, Christine E. Beardsworth & Allert . Bijleveld & Johannes Krietsch","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_res_patch_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of patch data — atl_res_patch_summary","title":"Summary of patch data — atl_res_patch_summary","text":"Computes summary statistics movement data grouped patches individual tag. Calculates spatial temporal summaries within patch, distances traveled inside patches, distances time intervals patches, displacement within patches, patch duration. Additional user-specified summary variables functions can also applied dynamically.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_res_patch_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of patch data — atl_res_patch_summary","text":"","code":"atl_res_patch_summary(data, summary_variables = c(), summary_functions = c())"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_res_patch_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of patch data — atl_res_patch_summary","text":"data data.frame data.table containing movement data. Must include columns: tag (ID), x, y (coords), time (timestamp), patch (patch ID). summary_variables Character vector variable names data additional summaries. Variables numeric compatible summary functions. summary_functions Character vector function name (single string) apply variable summary_variables. Functions must work numeric vectors (e.g., \"mean\" \"median\").","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_res_patch_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of patch data — atl_res_patch_summary","text":"data.table one row per tag patch containing: nfixes: Number fixes patch. x_mean, x_median, x_start, x_end: Summary stats x. y_mean, y_median, y_start, y_end: Summary stats y. time_mean, time_median, time_start, time_end: Summary stats time. Additional summaries summary_variables summary_functions. dist_in_patch: Total distance (m) traveled within thepatch. dist_bw_patch: Distance (m) end previous start current patch. time_bw_patch: Time (sec) elapsed end previous start current patch. disp_in_patch: Straight-line (m) displacement start end patch. duration: Duration spent (sec) within patch.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_res_patch_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary of patch data — atl_res_patch_summary","text":"Converts input data data.table needed filters rows missing patch assignments. summaries calculated tag patch.Distance calculations use Euclidean distance x-y coordinate space.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_res_patch_summary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary of patch data — atl_res_patch_summary","text":"Johannes Krietsch","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_simple_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate distances between successive localizations — atl_simple_dist","title":"Calculate distances between successive localizations — atl_simple_dist","text":"Gets euclidean distance consecutive localization coordinate reference system metres, .e., UTM systems.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_simple_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate distances between successive localizations — atl_simple_dist","text":"","code":"atl_simple_dist(data, x = \"x\", y = \"y\", lag = 1)"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_simple_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate distances between successive localizations — atl_simple_dist","text":"data dataframe object extending class data.frame, must contain two coordinate columns X Y coordinates. x column name data.frame object contains numeric X coordinate. y column name data.frame object contains numeric Y coordinate. lag lag (number localizations) calculate distance","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_simple_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate distances between successive localizations — atl_simple_dist","text":"Returns vector distances consecutive points.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_simple_dist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate distances between successive localizations — atl_simple_dist","text":"Pratik R. Gupte & Allert Bijleveld","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_size_along.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates different size values along a vector — atl_size_along","title":"Creates different size values along a vector — atl_size_along","text":"Copied https://github.com/mpio-/windR","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_size_along.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates different size values along a vector — atl_size_along","text":"","code":"atl_size_along(x, head = 20, to = c(0.1, 2.5))"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_size_along.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates different size values along a vector — atl_size_along","text":"x Vector along alpha created head Numeric parameter influencing lenght head Numeric vector including minimum maximum size","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_size_along.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates different size values along a vector — atl_size_along","text":"Numeric verctor different size values","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_size_along.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creates different size values along a vector — atl_size_along","text":"Mihai Valcu & Johannes Krietsch","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_size_along.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates different size values along a vector — atl_size_along","text":"","code":"library(ggplot2) d <- data.frame(   x = 1:100, y = 1:100,   s = atl_size_along(1:100, head = 70, to = c(0.1, 5)) ) bm <- ggplot(d, aes(x, y)) bm + geom_path(linewidth = 1)  bm + geom_path(linewidth = d$s, lineend = \"round\")"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_spec_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"WATLAS species colours — atl_spec_cols","title":"WATLAS species colours — atl_spec_cols","text":"Returns vector table predefined colours WATLAS species.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_spec_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"WATLAS species colours — atl_spec_cols","text":"","code":"atl_spec_cols(option = \"vector\")"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_spec_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"WATLAS species colours — atl_spec_cols","text":"option character string specifying output format. Options \"vector\" (default), returns named colour vector, \"table\", returns data.table species names colours.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_spec_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"WATLAS species colours — atl_spec_cols","text":"named character vector (use ggplot2) data.table species names corresponding colours.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_spec_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"WATLAS species colours — atl_spec_cols","text":"","code":"library(tools4watlas) atl_spec_cols(\"vector\") #>            curlew bar-tailed godwit     oystercatcher          redshank  #>    \"mediumpurple\"         \"#E69F00\"          \"grey20\"         \"#ffdd3c\"  #>          red knot        sanderling            dunlin         turnstone  #>       \"firebrick\"         \"#0072B2\"         \"#66A61E\"         \"#A6761D\"  #>       grey plover  curlew sandpiper         spoonbill    kentish plover  #>          \"grey70\"         \"#FC94AF\"           \"ivory\"         \"#56B4E9\"  atl_spec_cols(\"table\") #>               species       colour #>                <char>       <char> #>  1:            curlew mediumpurple #>  2: bar-tailed godwit      #E69F00 #>  3:     oystercatcher       grey20 #>  4:          redshank      #ffdd3c #>  5:          red knot    firebrick #>  6:        sanderling      #0072B2 #>  7:            dunlin      #66A61E #>  8:         turnstone      #A6761D #>  9:       grey plover       grey70 #> 10:  curlew sandpiper      #FC94AF #> 11:         spoonbill        ivory #> 12:    kentish plover      #56B4E9"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_spec_labs.html","id":null,"dir":"Reference","previous_headings":"","what":"WATLAS species labels — atl_spec_labs","title":"WATLAS species labels — atl_spec_labs","text":"Returns named vector species labels either multiline single-line format.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_spec_labs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"WATLAS species labels — atl_spec_labs","text":"","code":"atl_spec_labs(option = \"multiline\")"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_spec_labs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"WATLAS species labels — atl_spec_labs","text":"option character string specifying format species names. Options \"multiline\" (default), names include line breaks (\\n),  \"singleline\", names returned single line.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_spec_labs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"WATLAS species labels — atl_spec_labs","text":"named character vector names correspond species identifiers values formatted species names.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_spec_labs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"WATLAS species labels — atl_spec_labs","text":"","code":"library(tools4watlas) atl_spec_labs(\"multiline\") #>                    curlew         bar-tailed godwit             oystercatcher  #>        \"Eurasian\\ncurlew\"      \"Bar-tailed\\ngodwit\" \"Eurasian\\noystercatcher\"  #>                  redshank                  red knot                sanderling  #>        \"Common\\nredshank\"                \"Red knot\"              \"Sanderling\"  #>                    dunlin                 turnstone               grey plover  #>                  \"Dunlin\"               \"Turnstone\"            \"Grey\\nplover\"  #>          curlew sandpiper                 spoonbill            kentish plover  #>       \"Curlew\\nsandpiper\"     \"Eurasian\\nspoonbill\"         \"Kentish\\nplover\"  atl_spec_labs(\"multiline\") #>                    curlew         bar-tailed godwit             oystercatcher  #>        \"Eurasian\\ncurlew\"      \"Bar-tailed\\ngodwit\" \"Eurasian\\noystercatcher\"  #>                  redshank                  red knot                sanderling  #>        \"Common\\nredshank\"                \"Red knot\"              \"Sanderling\"  #>                    dunlin                 turnstone               grey plover  #>                  \"Dunlin\"               \"Turnstone\"            \"Grey\\nplover\"  #>          curlew sandpiper                 spoonbill            kentish plover  #>       \"Curlew\\nsandpiper\"     \"Eurasian\\nspoonbill\"         \"Kentish\\nplover\""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of localization data — atl_summary","title":"Summary of localization data — atl_summary","text":"function generates summary localization data calculating total number positions, first last data, days data time gaps localizations, well  data coverage. returns summary unique ID specified id_columns.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of localization data — atl_summary","text":"","code":"atl_summary(data, id_columns = c(\"tag\"))"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of localization data — atl_summary","text":"data data.table containing localization data columns ID, x, y coordinates, time, datetime. id_columns character vector specifying column(s) group . Defaults \"tag\".","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of localization data — atl_summary","text":"data.table summary statistics ID group, including total number positions, first last data, days data time gaps localizations, well  data coverage.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_summary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary of localization data — atl_summary","text":"Johannes Krietsch","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of localization data — atl_summary","text":"","code":"# packages library(tools4watlas)  # path to csv with filtered data data_path <- system.file(   \"extdata\", \"watlas_data_filtered.csv\",   package = \"tools4watlas\" )  # load data data <- fread(data_path, yaml = TRUE)  # summarize data summary <- atl_summary(data, id_columns = c(\"tag\")) summary #>       tag n_positions          first_data           last_data days_data min_gap #>    <char>       <int>              <POSc>              <POSc>     <num>   <num> #> 1:   3027       15833 2023-09-23 03:13:22 2023-09-23 22:24:26       0.8       3 #> 2:   3038       15935 2023-09-23 00:00:01 2023-09-23 23:59:57       1.0       3 #> 3:   3063       12294 2023-09-23 03:27:49 2023-09-23 22:24:55       0.8       3 #> 4:   3100        8411 2023-09-23 04:21:46 2023-09-23 21:41:16       0.7       3 #> 5:   3158       12401 2023-09-23 00:00:01 2023-09-23 23:59:57       1.0       3 #> 6:   3188       10050 2023-09-23 00:00:45 2023-09-23 23:41:50       1.0       3 #> 7:   3212        3846 2023-09-23 00:00:00 2023-09-23 23:59:56       1.0       8 #> 8:   3288        8130 2023-09-23 00:00:03 2023-09-23 23:59:54       1.0       6 #>    max_gap max_gap_f coverage #>      <num>    <char>    <num> #> 1:    2523    42 min     0.69 #> 2:    2850  47.5 min     0.55 #> 3:    2541  42.4 min     0.54 #> 4:   16145 4.5 hours     0.40 #> 5:    3252  54.2 min     0.43 #> 6:    9021 2.5 hours     0.35 #> 7:    7664 2.1 hours     0.36 #> 8:    2622  43.7 min     0.56"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_thin_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Thin tracking data by resampling or aggregation — atl_thin_data","title":"Thin tracking data by resampling or aggregation — atl_thin_data","text":"Uniformly reduce data volumes either aggregation resampling (specified method argument) interval specified seconds using interval argument. options make two important assumptions: (1) timestamps named 'time' 'datetime', (2) columns except identity columns can averaged R. 'subsample' option returns thinned dataset columns input data, 'aggregate' option drops column covxy, since propagated averaged position. options handle column 'time' differently: 'subsample' returns actual timestamp (UNIX time) sample, 'aggregate' returns mean timestamp (also UNIX time). 'aggregate' option recognises errors named varx vary. columns present together function assumes measure error, drops columns. actually measure error, function simply returns averaged position covariates time interval. Grouping variables' names (animal identity) may passed character vector id_columns argument.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_thin_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Thin tracking data by resampling or aggregation — atl_thin_data","text":"","code":"atl_thin_data(   data,   interval = 60,   id_columns = NULL,   method = c(\"subsample\", \"aggregate\") )"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_thin_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Thin tracking data by resampling or aggregation — atl_thin_data","text":"data Tracking data aggregate. Must columns x y, numeric column named time, well datetime. interval interval seconds aggregate. id_columns Column names grouping columns. method data thinned subsampling aggregation. resampling (method = \"subsample\"), first position group taken. aggregation (method = \"aggregate\"), group positions' mean taken.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_thin_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Thin tracking data by resampling or aggregation — atl_thin_data","text":"data.table aggregated subsampled data.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_thin_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Thin tracking data by resampling or aggregation — atl_thin_data","text":"Pratik Gupte & Allert Bijleveld & Johannes Krietsch","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_thin_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Thin tracking data by resampling or aggregation — atl_thin_data","text":"","code":"library(data.table)  data <- data.table(   tag = as.character(rep(1:2, each = 10)),   time = rep(seq(1696218721, 1696218721 + 92, by = 10), 2),   x = rnorm(20, 10, 1),   y = rnorm(20, 15, 1) )  data[, datetime := as.POSIXct(time, origin = \"1970-01-01\", tz = \"UTC\")] #>        tag       time         x        y            datetime #>     <char>      <num>     <num>    <num>              <POSc> #>  1:      1 1696218721  9.313147 13.86186 2023-10-02 03:52:01 #>  2:      1 1696218731  9.554338 16.25381 2023-10-02 03:52:11 #>  3:      1 1696218741 11.224082 15.42646 2023-10-02 03:52:21 #>  4:      1 1696218751 10.359814 14.70493 2023-10-02 03:52:31 #>  5:      1 1696218761 10.400771 15.89513 2023-10-02 03:52:41 #>  6:      1 1696218771 10.110683 15.87813 2023-10-02 03:52:51 #>  7:      1 1696218781  9.444159 15.82158 2023-10-02 03:53:01 #>  8:      1 1696218791 11.786913 15.68864 2023-10-02 03:53:11 #>  9:      1 1696218801 10.497850 15.55392 2023-10-02 03:53:21 #> 10:      1 1696218811  8.033383 14.93809 2023-10-02 03:53:31 #> 11:      2 1696218721 10.701356 14.69404 2023-10-02 03:52:01 #> 12:      2 1696218731  9.527209 14.61953 2023-10-02 03:52:11 #> 13:      2 1696218741  8.932176 14.30529 2023-10-02 03:52:21 #> 14:      2 1696218751  9.782025 14.79208 2023-10-02 03:52:31 #> 15:      2 1696218761  8.973996 13.73460 2023-10-02 03:52:41 #> 16:      2 1696218771  9.271109 17.16896 2023-10-02 03:52:51 #> 17:      2 1696218781  9.374961 16.20796 2023-10-02 03:53:01 #> 18:      2 1696218791  8.313307 13.87689 2023-10-02 03:53:11 #> 19:      2 1696218801 10.837787 14.59712 2023-10-02 03:53:21 #> 20:      2 1696218811 10.153373 14.53334 2023-10-02 03:53:31 #>        tag       time         x        y            datetime  # Thin the data by aggregation with a 60-second interval thinned_aggregated <- atl_thin_data(   data = data,   interval = 60,   id_columns = \"tag\",   method = \"aggregate\" )  # Thin the data by subsampling with a 60-second interval thinned_subsampled <- atl_thin_data(   data = data,   interval = 60,   id_columns = \"tag\",   method = \"subsample\" )  # View results print(thinned_aggregated) #>       tag       time         x        y            datetime n_aggregated #>    <char>      <num>     <num>    <num>              <POSc>        <int> #> 1:      1 1696218720 10.160472 15.33672 2023-10-02 03:52:00            6 #> 2:      1 1696218780  9.940576 15.50056 2023-10-02 03:53:00            4 #> 3:      2 1696218720  9.531312 14.88575 2023-10-02 03:52:00            6 #> 4:      2 1696218780  9.669857 14.80383 2023-10-02 03:53:00            4 print(thinned_subsampled) #>       tag       time         x        y            datetime n_subsampled #>    <char>      <num>     <num>    <num>              <POSc>        <int> #> 1:      1 1696218721  9.313147 13.86186 2023-10-02 03:52:01            6 #> 2:      1 1696218781  9.444159 15.82158 2023-10-02 03:53:01            4 #> 3:      2 1696218721 10.701356 14.69404 2023-10-02 03:52:01            6 #> 4:      2 1696218781  9.374961 16.20796 2023-10-02 03:53:01            4"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_time_steps.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate time steps and file names for an animation of movements — atl_time_steps","title":"Generate time steps and file names for an animation of movements — atl_time_steps","text":"function creates sequence time steps based given datetime vector time interval. also generates corresponding file names provided folder path time step. function also gives message showing total number frames (also saves text file, used plotting progress bar) long animation take, giving set fps (frames per second).","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_time_steps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate time steps and file names for an animation of movements — atl_time_steps","text":"","code":"atl_time_steps(   datetime_vector,   time_interval = \"10 min\",   output_path,   create_path = FALSE,   fps = 24 )"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_time_steps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate time steps and file names for an animation of movements — atl_time_steps","text":"datetime_vector vector datetime values (POSIXct similar). Can min max simple full vector data time_interval character string specifying time interval (e.g., \"30 sec\", \"10 min\", \"1 hour\"). output_path character string specifying directory folder files saved. create_path logical value. TRUE, function creates directory exist. fps numeric value specifying frames per second (fps). used calculate duration final animation. frame rate needs specified ffmpeg.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_time_steps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate time steps and file names for an animation of movements — atl_time_steps","text":"data.table two columns: datetime: generated time steps. path: Corresponding file paths time step.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_time_steps.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate time steps and file names for an animation of movements — atl_time_steps","text":"Johannes Krietsch","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_time_steps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate time steps and file names for an animation of movements — atl_time_steps","text":"","code":"library(tools4watlas)  # load example data data <- data_example  # create time steps ts <- atl_time_steps(   datetime_vector = data$datetime,   time_interval = \"10 min\",   output_path = tempdir(),   create_path = FALSE ) #> Number of frames: 139 - Animation duration: 5.79 sec (0.1 min) with 24 fps ts #>                 datetime #>                   <POSc> #>   1: 2023-09-23 01:00:00 #>   2: 2023-09-23 01:10:00 #>   3: 2023-09-23 01:20:00 #>   4: 2023-09-23 01:30:00 #>   5: 2023-09-23 01:40:00 #>  ---                     #> 135: 2023-09-23 23:20:00 #> 136: 2023-09-23 23:30:00 #> 137: 2023-09-23 23:40:00 #> 138: 2023-09-23 23:50:00 #> 139: 2023-09-24 00:00:00 #>                                                               path #>                                                             <char> #>   1: C:\\\\Users\\\\JKRIET~1\\\\AppData\\\\Local\\\\Temp\\\\RtmpEpYdj7/001.png #>   2: C:\\\\Users\\\\JKRIET~1\\\\AppData\\\\Local\\\\Temp\\\\RtmpEpYdj7/002.png #>   3: C:\\\\Users\\\\JKRIET~1\\\\AppData\\\\Local\\\\Temp\\\\RtmpEpYdj7/003.png #>   4: C:\\\\Users\\\\JKRIET~1\\\\AppData\\\\Local\\\\Temp\\\\RtmpEpYdj7/004.png #>   5: C:\\\\Users\\\\JKRIET~1\\\\AppData\\\\Local\\\\Temp\\\\RtmpEpYdj7/005.png #>  ---                                                               #> 135: C:\\\\Users\\\\JKRIET~1\\\\AppData\\\\Local\\\\Temp\\\\RtmpEpYdj7/135.png #> 136: C:\\\\Users\\\\JKRIET~1\\\\AppData\\\\Local\\\\Temp\\\\RtmpEpYdj7/136.png #> 137: C:\\\\Users\\\\JKRIET~1\\\\AppData\\\\Local\\\\Temp\\\\RtmpEpYdj7/137.png #> 138: C:\\\\Users\\\\JKRIET~1\\\\AppData\\\\Local\\\\Temp\\\\RtmpEpYdj7/138.png #> 139: C:\\\\Users\\\\JKRIET~1\\\\AppData\\\\Local\\\\Temp\\\\RtmpEpYdj7/139.png"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_turning_angle.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the turning angle between points — atl_turning_angle","title":"Get the turning angle between points — atl_turning_angle","text":"Gets relative heading two track segments (three localizations) using law cosines. turning angle returned degrees. Adds column angle data.table tracking data. Note smoothed data NaN values may occur (subsequent localizations place).","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_turning_angle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the turning angle between points — atl_turning_angle","text":"","code":"atl_turning_angle(data, tag = \"tag\", x = \"x\", y = \"y\", time = \"time\")"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_turning_angle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the turning angle between points — atl_turning_angle","text":"data dataframe similar must columns specified x, y, time. tag tag ID. x x coordinate. y y coordinate. time timestamp seconds since UNIX epoch.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_turning_angle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the turning angle between points — atl_turning_angle","text":"data.table added turning angles degrees. Negative degrees indicate 'left' turns. two fewer angles number rows dataframe.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_turning_angle.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the turning angle between points — atl_turning_angle","text":"Pratik R. Gupte & Allert Bijleveld & Johannes Krietsch","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_turning_angle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the turning angle between points — atl_turning_angle","text":"","code":"if (FALSE) { # \\dontrun{ data <- atl_turning_angle(   data,   tag = \"tag\", x = \"x\", y = \"y\", time = \"time\" ) } # }"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_t_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a colour transparent — atl_t_col","title":"Make a colour transparent — atl_t_col","text":"functionm make provided colour transparent.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_t_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a colour transparent — atl_t_col","text":"","code":"atl_t_col(color, percent = 50, name = NULL)"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_t_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a colour transparent — atl_t_col","text":"color color make transparant. percent percentage transparancy apply . name name argument passed rgb.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_t_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a colour transparent — atl_t_col","text":"transparant color returned.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_t_col.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make a colour transparent — atl_t_col","text":"Allert Bijleveld & Johannes Krietsch","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_t_col.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a colour transparent — atl_t_col","text":"","code":"# Example with 50% transparency color_with_alpha <- atl_t_col(\"blue\", percent = 50) print(color_with_alpha) #> [1] \"#0000FF7F\"  plot(1, 1,   col = color_with_alpha, pch = 16, cex = 20,   xlab = \"X\", ylab = \"Y\", main = \"Point with Transparent Color\" )   # Example with 30% transparency color_with_alpha <- atl_t_col(\"red\", percent = 90) print(color_with_alpha) #> [1] \"#FF000019\"  plot(1, 1,   col = color_with_alpha, pch = 16, cex = 20,   xlab = \"X\", ylab = \"Y\", main = \"Point with Transparent Color\" )"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_within_polygon.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect position intersections with a polygon — atl_within_polygon","title":"Detect position intersections with a polygon — atl_within_polygon","text":"Detects positions intersect sfc_*POLYGON. Tested single polygon objects.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_within_polygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect position intersections with a polygon — atl_within_polygon","text":"","code":"atl_within_polygon(data, x = \"x\", y = \"y\", polygon)"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_within_polygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect position intersections with a polygon — atl_within_polygon","text":"data dataframe similar containg least X Y coordinates. x name X coordinate, assumed default \"x\". y Y coordinate , default \"y\". polygon sfc_*POLYGON object must defined CRS. polygon CRS assumed appropriate positions well, assigned coordinates determining intersection.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/atl_within_polygon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect position intersections with a polygon — atl_within_polygon","text":"Row numbers positions inside polygon.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/data_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from two red knots and one redshank — data_example","title":"Data from two red knots and one redshank — data_example","text":"Data two red knots one redshank","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/data_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data from two red knots and one redshank — data_example","text":"","code":"data_example"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/data_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data from two red knots and one redshank — data_example","text":"data.table watlas data tide data added","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/data_example.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data from two red knots and one redshank — data_example","text":"watlas data example","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/lakes.html","id":null,"dir":"Reference","previous_headings":"","what":"Lake on Griend — lakes","title":"Lake on Griend — lakes","text":"Lake Griend","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/lakes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lake on Griend — lakes","text":"","code":"lakes"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/lakes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Lake on Griend — lakes","text":"sf object used background layer function atl_create_bm()","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/lakes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Lake on Griend — lakes","text":"https://www.openstreetmap.org","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/land.html","id":null,"dir":"Reference","previous_headings":"","what":"Land polygon around the Dutch Wadden Sea — land","title":"Land polygon around the Dutch Wadden Sea — land","text":"Land polygon around Dutch Wadden Sea","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/land.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Land polygon around the Dutch Wadden Sea — land","text":"","code":"land"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/land.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Land polygon around the Dutch Wadden Sea — land","text":"sf object used background layer function atl_create_bm()","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/land.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Land polygon around the Dutch Wadden Sea — land","text":"https://www.openstreetmap.org","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/mudflats.html","id":null,"dir":"Reference","previous_headings":"","what":"Mudflats polygons within the Dutch Wadden Sea — mudflats","title":"Mudflats polygons within the Dutch Wadden Sea — mudflats","text":"Mudflats polygons within Dutch Wadden Sea","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/mudflats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mudflats polygons within the Dutch Wadden Sea — mudflats","text":"","code":"mudflats"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/mudflats.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Mudflats polygons within the Dutch Wadden Sea — mudflats","text":"sf object used background layer function atl_create_bm()","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/mudflats.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mudflats polygons within the Dutch Wadden Sea — mudflats","text":"https://www.openstreetmap.org","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://allertbijleveld.github.io/tools4watlas/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""}]
